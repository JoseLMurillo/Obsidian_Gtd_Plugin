/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// modals/processInboxModal.ts
var import_obsidian = require("obsidian");
var ProcessInboxModal = class extends import_obsidian.Modal {
  constructor(app, tasks) {
    super(app);
    this.selectedFolder = "default";
    this.selectedFile = "default";
    this.tasks = tasks;
  }
  async onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Tasks" });
    for (let task of this.tasks) {
      const taskDiv = contentEl.createDiv();
      taskDiv.createEl("p", { text: task });
      new import_obsidian.Setting(taskDiv).setName("Selecciona destino").addDropdown((dropdown) => {
        dropdown.addOption("default", "");
        dropdown.addOption("1. Projects", "Projects");
        dropdown.addOption("2. Stay", "Stay");
        dropdown.addOption("3. Someday", "Someday");
        dropdown.addOption("Follow", "Follow");
        let fileDropdown = new import_obsidian.Setting(taskDiv);
        let fileName = new import_obsidian.Setting(taskDiv);
        let tag = new import_obsidian.Setting(taskDiv);
        let time = new import_obsidian.Setting(taskDiv);
        let date = new import_obsidian.Setting(taskDiv);
        let hour = new import_obsidian.Setting(taskDiv);
        dropdown.onChange(async (value) => {
          this.selectedFolder = value;
          fileDropdown.setName("").clear();
          fileName.setName("").clear();
          tag.setName("").clear();
          time.setName("").clear();
          date.setName("").clear();
          hour.setName("").clear();
          if (value !== "Follow" && value !== "default") {
            const files = await this.app.vault.adapter.list(`GTD/${value}`);
            if (files.files) {
              fileDropdown.setName("Select a project or create a new one").addDropdown((fileDropdown2) => {
                fileDropdown2.addOption("default", "");
                files.files.forEach((file) => {
                  fileDropdown2.addOption(file, this.getLastPart(file));
                });
                fileDropdown2.onChange((fileValue) => {
                  this.selectedFile = fileValue;
                });
              });
            }
          }
          fileName.setName("Project name if you do not have one selected").addText((text) => {
            text.onChange((value2) => {
              this.newFileName = value2;
            });
          });
          tag.setName("Tag").addText((text) => {
            text.onChange((value2) => {
              this.taskTag = value2;
            });
          }).settingEl.setAttribute("required", "true");
          time.setName("Duration time").addText((text) => {
            text.onChange((value2) => {
              this.taskTime = value2;
            });
          });
          date.setName("Date").addText((text) => {
            text.inputEl.setAttribute("type", "date");
            text.onChange((value2) => {
              this.taskDate = value2;
            });
          });
          hour.setName("Hour").addText((text) => {
            text.inputEl.setAttribute("type", "time");
            text.onChange((value2) => {
              this.taskHour = value2;
            });
          });
        });
        taskDiv.createEl("button", { text: "Process" }).addEventListener("click", () => {
          this.processTask(task);
          taskDiv.empty();
        });
      });
    }
  }
  getLastPart(text) {
    try {
      const lastSlashIndex = text.lastIndexOf("/");
      if (lastSlashIndex === -1) {
        return text;
      }
      return text.substring(lastSlashIndex + 1);
    } catch (error) {
      throw error;
    }
  }
  async addTaskToFile(text, filePath) {
    const file = this.app.vault.getAbstractFileByPath(filePath);
    if (file instanceof import_obsidian.TFile && text.trim() !== "") {
      try {
        let content = await this.app.vault.read(file);
        const insertPosition = content.indexOf("# Done");
        if (insertPosition !== -1) {
          const before = content.substring(0, insertPosition);
          const after = content.substring(insertPosition);
          content = before + text + "\n" + after;
        } else {
          content += "\n" + text;
        }
        await this.app.vault.modify(file, content);
        new import_obsidian.Notice("Task added");
      } catch (e) {
        new import_obsidian.Notice("ERROR");
        console.log(`Error ${e}`);
      }
    }
  }
  async deleteTaskFromFile(filePath, taskToDelete) {
    try {
      const fileContent = await this.app.vault.adapter.read(filePath);
      const lines = fileContent.split("\n");
      const updatedLines = lines.filter((line) => line.trim() !== taskToDelete.trim());
      const updatedContent = updatedLines.join("\n");
      await this.app.vault.adapter.write(filePath, updatedContent);
      new import_obsidian.Notice(`Task deleted: ${taskToDelete}`);
    } catch (error) {
      console.error("Failed to delete task:", error);
    }
  }
  async createProyect(path, fileName, data) {
    const newFilePath = `GTD/${path}/${fileName}.md`;
    const vault = this.app.vault;
    try {
      await vault.create(newFilePath, `${data}
# Done`);
      new import_obsidian.Notice("New project created successfully");
    } catch (e) {
      new import_obsidian.Notice("Error");
      console.log(`File ${newFilePath} already exists.`);
    }
    return newFilePath;
  }
  async processTask(task) {
    const formattedTask = `${task} #${this.taskTag} **${this.taskTime}** \u{1F4C5} ${this.taskDate} [hour::${this.taskHour}]`;
    try {
      if (this.selectedFolder === "Follow") {
        await this.addTaskToFile(formattedTask, `GTD/${this.selectedFolder}.md`);
      } else if (this.selectedFile === "default") {
        await this.createProyect(this.selectedFolder, this.newFileName, formattedTask);
      } else {
        await this.addTaskToFile(formattedTask, this.selectedFile);
      }
      this.deleteTaskFromFile("GTD/Inbox.md", task);
    } catch (error) {
      console.error("Error handling task:", error);
    }
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// modals/exampleModal.ts
var import_obsidian2 = require("obsidian");
var ExampleModal = class extends import_obsidian2.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "What's your name?" });
    new import_obsidian2.Setting(contentEl).setName("Name").addText((text) => text.onChange((value) => {
      this.result = value;
    }));
    new import_obsidian2.Setting(contentEl).addButton((btn) => btn.setButtonText("Submit").setCta().onClick(() => {
      this.close();
      this.onSubmit(this.result);
    }));
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};

// modals/addTaskToInboxModal.ts
var import_obsidian3 = require("obsidian");
var AddTaskToInboxModal = class extends import_obsidian3.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Add task" });
    const textComponent = new import_obsidian3.TextComponent(contentEl);
    textComponent.onChange((value) => {
      this.text = value;
    });
    const submitButton = new import_obsidian3.ButtonComponent(contentEl);
    submitButton.setButtonText("Add").onClick(() => {
      this.close();
      this.onSubmit(this.text);
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// main.ts
var MyPlugin = class extends import_obsidian4.Plugin {
  async processInbox() {
    let tasks;
    const filePath = "GTD/Inbox.md";
    try {
      const fileContent = await this.app.vault.adapter.read(filePath);
      const tasks2 = fileContent.split("\n").filter((line) => line.startsWith("- [ ]"));
      new ProcessInboxModal(this.app, tasks2).open();
    } catch (error) {
      console.error("Failed to read file:", error);
    }
  }
  //
  async onload() {
    this.addCommand({
      id: "process-inbox",
      name: "process Inbox",
      callback: () => {
        this.processInbox();
      }
    });
    this.addRibbonIcon("folder-output", "process Inbox", () => {
      this.processInbox();
    });
    this.addCommand({
      id: "Create_Gtd_Structure",
      name: "Create Gtd Structure",
      callback: () => this.createGtdStructure()
    });
    this.addCommand({
      id: "Add_Task_Inbox",
      name: "Add Task to Inbox",
      callback: () => {
        new AddTaskToInboxModal(this.app, (text) => this.addTaskToIbox(text)).open();
      }
    });
    this.addRibbonIcon("package-plus", "Add Task to Inbox", () => {
      new AddTaskToInboxModal(this.app, (text) => this.addTaskToIbox(text)).open();
    });
    this.addCommand({
      id: "display-modal",
      name: "Display modal",
      callback: () => {
        new ExampleModal(this.app, (result) => {
          new import_obsidian4.Notice(`Hello, ${result}!`);
        }).open();
      }
    });
    const item = this.addStatusBarItem();
    item.createEl("span", { text: "Hello from the status bar \u{1F44B}" });
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Status Bar Text");
  }
  onunload() {
    new import_obsidian4.Notice("unloading plugin");
  }
  //FUNCTIONS
  async createGtdStructure() {
    const vault = this.app.vault;
    const basePath = "GTD";
    const folders = [
      basePath,
      `${basePath}/1. Projects`,
      `${basePath}/2. Stay`,
      `${basePath}/3. Someday`,
      `${basePath}/4. archive`
    ];
    const files = [
      { name: `${basePath}/Inbox.md`, data: "" },
      { name: `${basePath}/Documentation.md`, data: "" },
      { name: `${basePath}/Follow.md`, data: "" }
    ];
    for await (const folder of folders) {
      try {
        await vault.createFolder(folder);
      } catch (e) {
        console.log(`Folder ${folder} already exists.`);
      }
    }
    for await (const file of files) {
      const { name, data } = file;
      try {
        await vault.create(`${name}`, `${data}`);
      } catch (e) {
        console.log(`File file already exists.`);
      }
    }
    new import_obsidian4.Notice("GTD structure created!");
  }
  async addTaskToIbox(text) {
    const filePath = "GTD/Inbox.md";
    const file = this.app.vault.getAbstractFileByPath(filePath);
    if (file instanceof import_obsidian4.TFile && text.trim() !== "") {
      try {
        text = `- [ ] ${text}`;
        let content = await this.app.vault.read(file);
        const insertPosition = content.indexOf("# Done");
        if (insertPosition !== -1) {
          const before = content.substring(0, insertPosition);
          const after = content.substring(insertPosition);
          content = before + text + "\n" + after;
        } else {
          content += "\n" + text;
        }
        await this.app.vault.modify(file, content);
        new import_obsidian4.Notice("Task added to inbox");
      } catch (e) {
        new import_obsidian4.Notice("ERROR");
        console.log(`Error ${e}`);
      }
    }
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJtb2RhbHMvcHJvY2Vzc0luYm94TW9kYWwudHMiLCAibW9kYWxzL2V4YW1wbGVNb2RhbC50cyIsICJtb2RhbHMvYWRkVGFza1RvSW5ib3hNb2RhbC50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBOb3RpY2UsIFRGaWxlIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgeyBQcm9jZXNzSW5ib3hNb2RhbCB9IGZyb20gJy4vbW9kYWxzL3Byb2Nlc3NJbmJveE1vZGFsJztcclxuaW1wb3J0IHsgRXhhbXBsZU1vZGFsIH0gZnJvbSAnLi9tb2RhbHMvZXhhbXBsZU1vZGFsJztcclxuaW1wb3J0IHsgQWRkVGFza1RvSW5ib3hNb2RhbCB9IGZyb20gJy4vbW9kYWxzL2FkZFRhc2tUb0luYm94TW9kYWwnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTXlQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xyXG5cclxuICAgIGFzeW5jIHByb2Nlc3NJbmJveCgpIHtcclxuICAgICAgICBsZXQgdGFza3M6IHN0cmluZ1tdO1xyXG4gICAgICAgIGNvbnN0IGZpbGVQYXRoID0gJ0dURC9JbmJveC5tZCc7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIGNvbnN0IGZpbGVDb250ZW50ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQuYWRhcHRlci5yZWFkKGZpbGVQYXRoKTtcclxuICAgICAgICAgIGNvbnN0IHRhc2tzID0gZmlsZUNvbnRlbnQuc3BsaXQoJ1xcbicpLmZpbHRlcihsaW5lID0+IGxpbmUuc3RhcnRzV2l0aCgnLSBbIF0nKSk7XHJcbiAgICAgICAgICAvL3RoaXMudGFza3MgPSB0YXNrcztcclxuXHJcbiAgICAgICAgICBuZXcgUHJvY2Vzc0luYm94TW9kYWwodGhpcy5hcHAsIHRhc2tzKS5vcGVuKCk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byByZWFkIGZpbGU6JywgZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy9cclxuICAgIGFzeW5jIG9ubG9hZCgpIHtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcclxuICAgICAgICAgICAgaWQ6ICdwcm9jZXNzLWluYm94JyxcclxuICAgICAgICAgICAgbmFtZTogJ3Byb2Nlc3MgSW5ib3gnLFxyXG4gICAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xyXG4gICAgICAgICAgICAgIHRoaXMucHJvY2Vzc0luYm94KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmFkZFJpYmJvbkljb24oJ2ZvbGRlci1vdXRwdXQnLCAncHJvY2VzcyBJbmJveCcsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5wcm9jZXNzSW5ib3goKTtcclxuICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgIC8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuXHJcbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcclxuICAgICAgICAgICAgaWQ6IFwiQ3JlYXRlX0d0ZF9TdHJ1Y3R1cmVcIixcclxuICAgICAgICAgICAgbmFtZTogXCJDcmVhdGUgR3RkIFN0cnVjdHVyZVwiLFxyXG4gICAgICAgICAgICBjYWxsYmFjazogKCkgPT4gdGhpcy5jcmVhdGVHdGRTdHJ1Y3R1cmUoKVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmFkZENvbW1hbmQoe1xyXG4gICAgICAgICAgICBpZDogJ0FkZF9UYXNrX0luYm94JyxcclxuICAgICAgICAgICAgbmFtZTogJ0FkZCBUYXNrIHRvIEluYm94JyxcclxuICAgICAgICAgICAgY2FsbGJhY2s6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIG5ldyBBZGRUYXNrVG9JbmJveE1vZGFsKHRoaXMuYXBwLCAodGV4dCkgPT4gdGhpcy5hZGRUYXNrVG9JYm94KHRleHQpKS5vcGVuKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRSaWJib25JY29uKCdwYWNrYWdlLXBsdXMnLCAnQWRkIFRhc2sgdG8gSW5ib3gnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIG5ldyBBZGRUYXNrVG9JbmJveE1vZGFsKHRoaXMuYXBwLCAodGV4dCkgPT4gdGhpcy5hZGRUYXNrVG9JYm94KHRleHQpKS5vcGVuKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuXHJcblxyXG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XHJcbiAgICAgICAgICAgIGlkOiBcImRpc3BsYXktbW9kYWxcIixcclxuICAgICAgICAgICAgbmFtZTogXCJEaXNwbGF5IG1vZGFsXCIsXHJcbiAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBuZXcgRXhhbXBsZU1vZGFsKHRoaXMuYXBwLCAocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShgSGVsbG8sICR7cmVzdWx0fSFgKTtcclxuICAgICAgICAgICAgICAgIH0pLm9wZW4oKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmFkZFN0YXR1c0Jhckl0ZW0oKTtcclxuICAgICAgICBpdGVtLmNyZWF0ZUVsKFwic3BhblwiLCB7IHRleHQ6IFwiSGVsbG8gZnJvbSB0aGUgc3RhdHVzIGJhciBcdUQ4M0RcdURDNEJcIiB9KTtcclxuXHJcbiAgICAgICAgLyogTVkgVEVTVCAqL1xyXG4gICAgICAgIC8vIFRoaXMgYWRkcyBhIHN0YXR1cyBiYXIgaXRlbSB0byB0aGUgYm90dG9tIG9mIHRoZSBhcHAuIERvZXMgbm90IHdvcmsgb24gbW9iaWxlIGFwcHMuXHJcbiAgICAgICAgY29uc3Qgc3RhdHVzQmFySXRlbUVsID0gdGhpcy5hZGRTdGF0dXNCYXJJdGVtKCk7XHJcbiAgICAgICAgc3RhdHVzQmFySXRlbUVsLnNldFRleHQoJ1N0YXR1cyBCYXIgVGV4dCcpO1xyXG4gICAgfVxyXG5cclxuICAgIG9udW5sb2FkKCkge1xyXG4gICAgICAgIG5ldyBOb3RpY2UoJ3VubG9hZGluZyBwbHVnaW4nKTtcclxuICAgIH1cclxuXHJcbiAgICAvL0ZVTkNUSU9OU1xyXG4gICAgYXN5bmMgY3JlYXRlR3RkU3RydWN0dXJlKCkge1xyXG4gICAgICAgIGNvbnN0IHZhdWx0ID0gdGhpcy5hcHAudmF1bHQ7XHJcbiAgICAgICAgY29uc3QgYmFzZVBhdGggPSAnR1REJztcclxuXHJcbiAgICAgICAgY29uc3QgZm9sZGVycyA9IFtcclxuICAgICAgICAgICAgYmFzZVBhdGgsXHJcbiAgICAgICAgICAgIGAke2Jhc2VQYXRofS8xLiBQcm9qZWN0c2AsXHJcbiAgICAgICAgICAgIGAke2Jhc2VQYXRofS8yLiBTdGF5YCxcclxuICAgICAgICAgICAgYCR7YmFzZVBhdGh9LzMuIFNvbWVkYXlgLFxyXG4gICAgICAgICAgICBgJHtiYXNlUGF0aH0vNC4gYXJjaGl2ZWBcclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICBjb25zdCBmaWxlcyA9IFtcclxuICAgICAgICAgICAgeyBuYW1lOiBgJHtiYXNlUGF0aH0vSW5ib3gubWRgLCBkYXRhOiAnJyB9LFxyXG4gICAgICAgICAgICB7IG5hbWU6IGAke2Jhc2VQYXRofS9Eb2N1bWVudGF0aW9uLm1kYCwgZGF0YTogJycgfSxcclxuICAgICAgICAgICAgeyBuYW1lOiBgJHtiYXNlUGF0aH0vRm9sbG93Lm1kYCwgZGF0YTogJycgfVxyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIGZvciBhd2FpdCAoY29uc3QgZm9sZGVyIG9mIGZvbGRlcnMpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHZhdWx0LmNyZWF0ZUZvbGRlcihmb2xkZXIpO1xyXG5cclxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYEZvbGRlciAke2ZvbGRlcn0gYWxyZWFkeSBleGlzdHMuYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciBhd2FpdCAoY29uc3QgZmlsZSBvZiBmaWxlcykge1xyXG4gICAgICAgICAgICBjb25zdCB7IG5hbWUsIGRhdGEgfSA9IGZpbGU7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB2YXVsdC5jcmVhdGUoYCR7bmFtZX1gLCBgJHtkYXRhfWApO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgRmlsZSBmaWxlIGFscmVhZHkgZXhpc3RzLmApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBuZXcgTm90aWNlKCdHVEQgc3RydWN0dXJlIGNyZWF0ZWQhJyk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgYWRkVGFza1RvSWJveCh0ZXh0OiBzdHJpbmcpIHtcclxuICAgICAgICBjb25zdCBmaWxlUGF0aCA9ICdHVEQvSW5ib3gubWQnO1xyXG4gICAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZmlsZVBhdGgpO1xyXG5cclxuICAgICAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIFRGaWxlICYmIHRleHQudHJpbSgpICE9PSAnJykge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgdGV4dCA9IGAtIFsgXSAke3RleHR9YDtcclxuICAgICAgICAgICAgICAgIGxldCBjb250ZW50ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZChmaWxlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbnNlcnRQb3NpdGlvbiA9IGNvbnRlbnQuaW5kZXhPZignIyBEb25lJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5zZXJ0UG9zaXRpb24gIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYmVmb3JlID0gY29udGVudC5zdWJzdHJpbmcoMCwgaW5zZXJ0UG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFmdGVyID0gY29udGVudC5zdWJzdHJpbmcoaW5zZXJ0UG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBiZWZvcmUgKyB0ZXh0ICsgJ1xcbicgKyBhZnRlcjtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGVudCArPSAnXFxuJyArIHRleHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hcHAudmF1bHQubW9kaWZ5KGZpbGUsIGNvbnRlbnQpO1xyXG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnVGFzayBhZGRlZCB0byBpbmJveCcpO1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnRVJST1InKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgRXJyb3IgJHtlfWApXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsICJpbXBvcnQgeyBBcHAsIE1vZGFsLCBTZXR0aW5nLCBUZXh0Q29tcG9uZW50LCBCdXR0b25Db21wb25lbnQsIE5vdGljZSwgVEZpbGUgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBQcm9jZXNzSW5ib3hNb2RhbCBleHRlbmRzIE1vZGFsIHtcclxuICB0YXNrczogc3RyaW5nW107XHJcbiAgc2VsZWN0ZWRGb2xkZXI6IHN0cmluZyA9ICdkZWZhdWx0JztcclxuICBzZWxlY3RlZEZpbGU6IHN0cmluZyA9ICdkZWZhdWx0JztcclxuICBuZXdGaWxlTmFtZTogc3RyaW5nO1xyXG4gIHRhc2tUYWc6IHN0cmluZztcclxuICB0YXNrVGltZTogc3RyaW5nO1xyXG4gIHRhc2tEYXRlOiBzdHJpbmc7XHJcbiAgdGFza0hvdXI6IHN0cmluZztcclxuXHJcbiAgdGFzazogc3RyaW5nO1xyXG5cclxuICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgdGFza3M6IHN0cmluZ1tdKSB7XHJcbiAgICBzdXBlcihhcHApO1xyXG4gICAgdGhpcy50YXNrcyA9IHRhc2tzO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgb25PcGVuKCkge1xyXG4gICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XHJcbiAgICBjb250ZW50RWwuZW1wdHkoKTtcclxuXHJcbiAgICBjb250ZW50RWwuY3JlYXRlRWwoJ2gyJywgeyB0ZXh0OiAnVGFza3MnIH0pO1xyXG5cclxuICAgIGZvciAobGV0IHRhc2sgb2YgdGhpcy50YXNrcykge1xyXG4gICAgICBjb25zdCB0YXNrRGl2ID0gY29udGVudEVsLmNyZWF0ZURpdigpO1xyXG4gICAgICB0YXNrRGl2LmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiB0YXNrIH0pO1xyXG5cclxuICAgICAgLy9zZWxlY3RvciBkZSBjYXJwZXRhL2FyY2hpdm9cclxuICAgICAgbmV3IFNldHRpbmcodGFza0RpdilcclxuICAgICAgICAuc2V0TmFtZSgnU2VsZWNjaW9uYSBkZXN0aW5vJylcclxuICAgICAgICAuYWRkRHJvcGRvd24oZHJvcGRvd24gPT4ge1xyXG4gICAgICAgICAgZHJvcGRvd24uYWRkT3B0aW9uKCdkZWZhdWx0JywgJycpO1xyXG4gICAgICAgICAgZHJvcGRvd24uYWRkT3B0aW9uKCcxLiBQcm9qZWN0cycsICdQcm9qZWN0cycpO1xyXG4gICAgICAgICAgZHJvcGRvd24uYWRkT3B0aW9uKCcyLiBTdGF5JywgJ1N0YXknKTtcclxuICAgICAgICAgIGRyb3Bkb3duLmFkZE9wdGlvbignMy4gU29tZWRheScsICdTb21lZGF5Jyk7XHJcbiAgICAgICAgICBkcm9wZG93bi5hZGRPcHRpb24oJ0ZvbGxvdycsICdGb2xsb3cnKTtcclxuXHJcbiAgICAgICAgICBsZXQgZmlsZURyb3Bkb3duID0gbmV3IFNldHRpbmcodGFza0Rpdik7XHJcbiAgICAgICAgICBsZXQgZmlsZU5hbWUgPSBuZXcgU2V0dGluZyh0YXNrRGl2KTtcclxuICAgICAgICAgIGxldCB0YWcgPSBuZXcgU2V0dGluZyh0YXNrRGl2KTtcclxuICAgICAgICAgIGxldCB0aW1lID0gbmV3IFNldHRpbmcodGFza0Rpdik7XHJcbiAgICAgICAgICBsZXQgZGF0ZSA9IG5ldyBTZXR0aW5nKHRhc2tEaXYpO1xyXG4gICAgICAgICAgbGV0IGhvdXIgPSBuZXcgU2V0dGluZyh0YXNrRGl2KTtcclxuXHJcbiAgICAgICAgICBkcm9wZG93bi5vbkNoYW5nZShhc3luYyB2YWx1ZSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRGb2xkZXIgPSB2YWx1ZTtcclxuXHJcbiAgICAgICAgICAgIGZpbGVEcm9wZG93bi5zZXROYW1lKCcnKS5jbGVhcigpO1xyXG4gICAgICAgICAgICBmaWxlTmFtZS5zZXROYW1lKCcnKS5jbGVhcigpO1xyXG4gICAgICAgICAgICB0YWcuc2V0TmFtZSgnJykuY2xlYXIoKTtcclxuICAgICAgICAgICAgdGltZS5zZXROYW1lKCcnKS5jbGVhcigpO1xyXG4gICAgICAgICAgICBkYXRlLnNldE5hbWUoJycpLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIGhvdXIuc2V0TmFtZSgnJykuY2xlYXIoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gJ0ZvbGxvdycgJiYgdmFsdWUgIT09ICdkZWZhdWx0Jykge1xyXG4gICAgICAgICAgICAgIGNvbnN0IGZpbGVzID0gYXdhaXQgdGhpcy5hcHAudmF1bHQuYWRhcHRlci5saXN0KGBHVEQvJHt2YWx1ZX1gKTtcclxuXHJcbiAgICAgICAgICAgICAgaWYgKGZpbGVzLmZpbGVzKSB7XHJcbiAgICAgICAgICAgICAgICBmaWxlRHJvcGRvd24uc2V0TmFtZSgnU2VsZWN0IGEgcHJvamVjdCBvciBjcmVhdGUgYSBuZXcgb25lJylcclxuICAgICAgICAgICAgICAgICAgLmFkZERyb3Bkb3duKGZpbGVEcm9wZG93biA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsZURyb3Bkb3duLmFkZE9wdGlvbignZGVmYXVsdCcsICcnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZmlsZXMuZmlsZXMuZm9yRWFjaChmaWxlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgIGZpbGVEcm9wZG93bi5hZGRPcHRpb24oZmlsZSwgdGhpcy5nZXRMYXN0UGFydChmaWxlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZpbGVEcm9wZG93bi5vbkNoYW5nZShmaWxlVmFsdWUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEZpbGUgPSBmaWxlVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZmlsZU5hbWVcclxuICAgICAgICAgICAgICAuc2V0TmFtZSgnUHJvamVjdCBuYW1lIGlmIHlvdSBkbyBub3QgaGF2ZSBvbmUgc2VsZWN0ZWQnKVxyXG4gICAgICAgICAgICAgIC5hZGRUZXh0KHRleHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGV4dC5vbkNoYW5nZSh2YWx1ZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMubmV3RmlsZU5hbWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gVEFHXHJcbiAgICAgICAgICAgIHRhZy5zZXROYW1lKCdUYWcnKVxyXG4gICAgICAgICAgICAgIC5hZGRUZXh0KHRleHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGV4dC5vbkNoYW5nZSh2YWx1ZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMudGFza1RhZyA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAuc2V0dGluZ0VsLnNldEF0dHJpYnV0ZSgncmVxdWlyZWQnLCAndHJ1ZScpXHJcbiAgICAgICAgICAgICAgO1xyXG5cclxuICAgICAgICAgICAgLy8gRFVSQVRJT04gVElNRVxyXG4gICAgICAgICAgICB0aW1lLnNldE5hbWUoJ0R1cmF0aW9uIHRpbWUnKVxyXG4gICAgICAgICAgICAgIC5hZGRUZXh0KHRleHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGV4dC5vbkNoYW5nZSh2YWx1ZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMudGFza1RpbWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gREFURVxyXG4gICAgICAgICAgICBkYXRlLnNldE5hbWUoJ0RhdGUnKVxyXG4gICAgICAgICAgICAgIC5hZGRUZXh0KHRleHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGV4dC5pbnB1dEVsLnNldEF0dHJpYnV0ZSgndHlwZScsICdkYXRlJyk7XHJcbiAgICAgICAgICAgICAgICB0ZXh0Lm9uQ2hhbmdlKHZhbHVlID0+IHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy50YXNrRGF0ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBIT1VSXHJcbiAgICAgICAgICAgIGhvdXIuc2V0TmFtZSgnSG91cicpXHJcbiAgICAgICAgICAgICAgLmFkZFRleHQodGV4dCA9PiB7XHJcbiAgICAgICAgICAgICAgICB0ZXh0LmlucHV0RWwuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RpbWUnKTtcclxuICAgICAgICAgICAgICAgIHRleHQub25DaGFuZ2UodmFsdWUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnRhc2tIb3VyID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIC8vIEJUTiBQUk9DRVNTXHJcbiAgICAgICAgICB0YXNrRGl2LmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdQcm9jZXNzJyB9KS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzc1Rhc2sodGFzayk7XHJcbiAgICAgICAgICAgIHRhc2tEaXYuZW1wdHkoKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuXHJcbiAgZ2V0TGFzdFBhcnQodGV4dDogc3RyaW5nKSB7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgbGFzdFNsYXNoSW5kZXggPSB0ZXh0Lmxhc3RJbmRleE9mKCcvJyk7XHJcbiAgICAgIGlmIChsYXN0U2xhc2hJbmRleCA9PT0gLTEpIHtcclxuICAgICAgICByZXR1cm4gdGV4dDtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdGV4dC5zdWJzdHJpbmcobGFzdFNsYXNoSW5kZXggKyAxKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHRocm93IGVycm9yO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcblxyXG4gIGFzeW5jIGFkZFRhc2tUb0ZpbGUodGV4dDogc3RyaW5nLCBmaWxlUGF0aDogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBmaWxlID0gdGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGZpbGVQYXRoKTtcclxuXHJcbiAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIFRGaWxlICYmIHRleHQudHJpbSgpICE9PSAnJykge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGxldCBjb250ZW50ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZChmaWxlKTtcclxuXHJcbiAgICAgICAgY29uc3QgaW5zZXJ0UG9zaXRpb24gPSBjb250ZW50LmluZGV4T2YoJyMgRG9uZScpO1xyXG4gICAgICAgIGlmIChpbnNlcnRQb3NpdGlvbiAhPT0gLTEpIHtcclxuICAgICAgICAgIGNvbnN0IGJlZm9yZSA9IGNvbnRlbnQuc3Vic3RyaW5nKDAsIGluc2VydFBvc2l0aW9uKTtcclxuICAgICAgICAgIGNvbnN0IGFmdGVyID0gY29udGVudC5zdWJzdHJpbmcoaW5zZXJ0UG9zaXRpb24pO1xyXG4gICAgICAgICAgY29udGVudCA9IGJlZm9yZSArIHRleHQgKyAnXFxuJyArIGFmdGVyO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb250ZW50ICs9ICdcXG4nICsgdGV4dDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGF3YWl0IHRoaXMuYXBwLnZhdWx0Lm1vZGlmeShmaWxlLCBjb250ZW50KTtcclxuICAgICAgICBuZXcgTm90aWNlKCdUYXNrIGFkZGVkJyk7XHJcblxyXG4gICAgICB9XHJcbiAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgbmV3IE5vdGljZSgnRVJST1InKTtcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coYEVycm9yICR7ZX1gKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuXHJcbiAgYXN5bmMgZGVsZXRlVGFza0Zyb21GaWxlKGZpbGVQYXRoOiBzdHJpbmcsIHRhc2tUb0RlbGV0ZTogc3RyaW5nKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBmaWxlQ29udGVudCA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIucmVhZChmaWxlUGF0aCk7XHJcbiAgICAgIGNvbnN0IGxpbmVzID0gZmlsZUNvbnRlbnQuc3BsaXQoJ1xcbicpO1xyXG4gICAgICBjb25zdCB1cGRhdGVkTGluZXMgPSBsaW5lcy5maWx0ZXIobGluZSA9PiBsaW5lLnRyaW0oKSAhPT0gdGFza1RvRGVsZXRlLnRyaW0oKSk7XHJcbiAgICAgIGNvbnN0IHVwZGF0ZWRDb250ZW50ID0gdXBkYXRlZExpbmVzLmpvaW4oJ1xcbicpO1xyXG5cclxuICAgICAgYXdhaXQgdGhpcy5hcHAudmF1bHQuYWRhcHRlci53cml0ZShmaWxlUGF0aCwgdXBkYXRlZENvbnRlbnQpO1xyXG4gICAgICBuZXcgTm90aWNlIChgVGFzayBkZWxldGVkOiAke3Rhc2tUb0RlbGV0ZX1gKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBkZWxldGUgdGFzazonLCBlcnJvcik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuXHJcbiAgYXN5bmMgY3JlYXRlUHJveWVjdChwYXRoOiBzdHJpbmcsIGZpbGVOYW1lOiBzdHJpbmcsIGRhdGE6IHN0cmluZykge1xyXG4gICAgY29uc3QgbmV3RmlsZVBhdGggPSBgR1RELyR7cGF0aH0vJHtmaWxlTmFtZX0ubWRgO1xyXG4gICAgY29uc3QgdmF1bHQgPSB0aGlzLmFwcC52YXVsdDtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBhd2FpdCB2YXVsdC5jcmVhdGUobmV3RmlsZVBhdGgsIGAke2RhdGF9XFxuIyBEb25lYCk7XHJcbiAgICAgIG5ldyBOb3RpY2UoJ05ldyBwcm9qZWN0IGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5Jyk7XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIG5ldyBOb3RpY2UoJ0Vycm9yJyk7XHJcbiAgICAgIGNvbnNvbGUubG9nKGBGaWxlICR7bmV3RmlsZVBhdGh9IGFscmVhZHkgZXhpc3RzLmApO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBuZXdGaWxlUGF0aDtcclxuICB9XHJcblxyXG5cclxuICBhc3luYyBwcm9jZXNzVGFzayh0YXNrOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IGZvcm1hdHRlZFRhc2sgPSBgJHt0YXNrfSAjJHt0aGlzLnRhc2tUYWd9ICoqJHt0aGlzLnRhc2tUaW1lfSoqIFx1RDgzRFx1RENDNSAke3RoaXMudGFza0RhdGV9IFtob3VyOjoke3RoaXMudGFza0hvdXJ9XWA7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRGb2xkZXIgPT09ICdGb2xsb3cnKSB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5hZGRUYXNrVG9GaWxlKGZvcm1hdHRlZFRhc2ssIGBHVEQvJHt0aGlzLnNlbGVjdGVkRm9sZGVyfS5tZGApO1xyXG4gIFxyXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuc2VsZWN0ZWRGaWxlID09PSAnZGVmYXVsdCcpIHtcclxuICAgICAgICBhd2FpdCB0aGlzLmNyZWF0ZVByb3llY3QodGhpcy5zZWxlY3RlZEZvbGRlciwgdGhpcy5uZXdGaWxlTmFtZSwgZm9ybWF0dGVkVGFzayk7XHJcbiAgXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5hZGRUYXNrVG9GaWxlKGZvcm1hdHRlZFRhc2ssIHRoaXMuc2VsZWN0ZWRGaWxlKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5kZWxldGVUYXNrRnJvbUZpbGUoJ0dURC9JbmJveC5tZCcsIHRhc2spO1xyXG4gICAgfVxyXG4gICAgY2F0Y2goZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgaGFuZGxpbmcgdGFzazonLCBlcnJvcik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvbkNsb3NlKCkge1xyXG4gICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XHJcbiAgICBjb250ZW50RWwuZW1wdHkoKTtcclxuICB9XHJcbn0iLCAiaW1wb3J0IHsgQXBwLCBNb2RhbCwgU2V0dGluZ30gZnJvbSBcIm9ic2lkaWFuXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgRXhhbXBsZU1vZGFsIGV4dGVuZHMgTW9kYWwge1xyXG4gICAgcmVzdWx0OiBzdHJpbmc7XHJcbiAgICBvblN1Ym1pdDogKHJlc3VsdDogc3RyaW5nKSA9PiB2b2lkO1xyXG4gIFxyXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIG9uU3VibWl0OiAocmVzdWx0OiBzdHJpbmcpID0+IHZvaWQpIHtcclxuICAgICAgc3VwZXIoYXBwKTtcclxuICAgICAgdGhpcy5vblN1Ym1pdCA9IG9uU3VibWl0O1xyXG4gICAgfVxyXG4gIFxyXG4gICAgb25PcGVuKCkge1xyXG4gICAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcclxuICBcclxuICAgICAgY29udGVudEVsLmNyZWF0ZUVsKFwiaDFcIiwgeyB0ZXh0OiBcIldoYXQncyB5b3VyIG5hbWU/XCIgfSk7XHJcbiAgXHJcbiAgICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcclxuICAgICAgICAuc2V0TmFtZShcIk5hbWVcIilcclxuICAgICAgICAuYWRkVGV4dCgodGV4dCkgPT5cclxuICAgICAgICAgIHRleHQub25DaGFuZ2UoKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucmVzdWx0ID0gdmFsdWVcclxuICAgICAgICAgIH0pKTtcclxuICBcclxuICAgICAgbmV3IFNldHRpbmcoY29udGVudEVsKVxyXG4gICAgICAgIC5hZGRCdXR0b24oKGJ0bikgPT5cclxuICAgICAgICAgIGJ0blxyXG4gICAgICAgICAgICAuc2V0QnV0dG9uVGV4dChcIlN1Ym1pdFwiKVxyXG4gICAgICAgICAgICAuc2V0Q3RhKClcclxuICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xyXG4gICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICAgICAgICB0aGlzLm9uU3VibWl0KHRoaXMucmVzdWx0KTtcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgb25DbG9zZSgpIHtcclxuICAgICAgbGV0IHsgY29udGVudEVsIH0gPSB0aGlzO1xyXG4gICAgICBjb250ZW50RWwuZW1wdHkoKTtcclxuICAgIH1cclxuICB9IiwgImltcG9ydCB7IEFwcCwgTW9kYWwsIFRleHRDb21wb25lbnQsIEJ1dHRvbkNvbXBvbmVudCB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEFkZFRhc2tUb0luYm94TW9kYWwgZXh0ZW5kcyBNb2RhbCB7XHJcbiAgICB0ZXh0OiBzdHJpbmc7XHJcbiAgICBvblN1Ym1pdDogKHRleHQ6IHN0cmluZykgPT4gdm9pZDtcclxuICBcclxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBvblN1Ym1pdDogKHRleHQ6IHN0cmluZykgPT4gdm9pZCkge1xyXG4gICAgICBzdXBlcihhcHApO1xyXG4gICAgICB0aGlzLm9uU3VibWl0ID0gb25TdWJtaXQ7XHJcbiAgICB9XHJcbiAgXHJcbiAgICBvbk9wZW4oKSB7XHJcbiAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xyXG4gIFxyXG4gICAgICBjb250ZW50RWwuY3JlYXRlRWwoJ2gyJywgeyB0ZXh0OiAnQWRkIHRhc2snIH0pO1xyXG4gIFxyXG4gICAgICBjb25zdCB0ZXh0Q29tcG9uZW50ID0gbmV3IFRleHRDb21wb25lbnQoY29udGVudEVsKTtcclxuICAgICAgdGV4dENvbXBvbmVudC5vbkNoYW5nZSh2YWx1ZSA9PiB7XHJcbiAgICAgICAgdGhpcy50ZXh0ID0gdmFsdWU7XHJcbiAgICAgIH0pO1xyXG4gIFxyXG4gICAgICBjb25zdCBzdWJtaXRCdXR0b24gPSBuZXcgQnV0dG9uQ29tcG9uZW50KGNvbnRlbnRFbCk7XHJcbiAgICAgIHN1Ym1pdEJ1dHRvbi5zZXRCdXR0b25UZXh0KCdBZGQnKS5vbkNsaWNrKCgpID0+IHtcclxuICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgICAgdGhpcy5vblN1Ym1pdCh0aGlzLnRleHQpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICBcclxuICAgIG9uQ2xvc2UoKSB7XHJcbiAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xyXG4gICAgICBjb250ZW50RWwuZW1wdHkoKTtcclxuICAgIH1cclxuICB9Il0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBQUFBLG1CQUFzQzs7O0FDQXRDLHNCQUFtRjtBQUU1RSxJQUFNLG9CQUFOLGNBQWdDLHNCQUFNO0FBQUEsRUFZM0MsWUFBWSxLQUFVLE9BQWlCO0FBQ3JDLFVBQU0sR0FBRztBQVhYLDBCQUF5QjtBQUN6Qix3QkFBdUI7QUFXckIsU0FBSyxRQUFRO0FBQUEsRUFDZjtBQUFBLEVBRUEsTUFBTSxTQUFTO0FBQ2IsVUFBTSxFQUFFLFVBQVUsSUFBSTtBQUN0QixjQUFVLE1BQU07QUFFaEIsY0FBVSxTQUFTLE1BQU0sRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUUxQyxhQUFTLFFBQVEsS0FBSyxPQUFPO0FBQzNCLFlBQU0sVUFBVSxVQUFVLFVBQVU7QUFDcEMsY0FBUSxTQUFTLEtBQUssRUFBRSxNQUFNLEtBQUssQ0FBQztBQUdwQyxVQUFJLHdCQUFRLE9BQU8sRUFDaEIsUUFBUSxvQkFBb0IsRUFDNUIsWUFBWSxjQUFZO0FBQ3ZCLGlCQUFTLFVBQVUsV0FBVyxFQUFFO0FBQ2hDLGlCQUFTLFVBQVUsZUFBZSxVQUFVO0FBQzVDLGlCQUFTLFVBQVUsV0FBVyxNQUFNO0FBQ3BDLGlCQUFTLFVBQVUsY0FBYyxTQUFTO0FBQzFDLGlCQUFTLFVBQVUsVUFBVSxRQUFRO0FBRXJDLFlBQUksZUFBZSxJQUFJLHdCQUFRLE9BQU87QUFDdEMsWUFBSSxXQUFXLElBQUksd0JBQVEsT0FBTztBQUNsQyxZQUFJLE1BQU0sSUFBSSx3QkFBUSxPQUFPO0FBQzdCLFlBQUksT0FBTyxJQUFJLHdC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QUM5QixVQUFNLFdBQVc7QUFDakIsVUFBTSxPQUFPLEtBQUssSUFBSSxNQUFNLHNCQUFzQixRQUFRO0FBRTFELFFBQUksZ0JBQWdCLDBCQUFTLEtBQUssS0FBSyxNQUFNLElBQUk7QUFDN0MsVUFBSTtBQUNBLGVBQU8sU0FBUztBQUNoQixZQUFJLFVBQVUsTUFBTSxLQUFLLElBQUksTUFBTSxLQUFLLElBQUk7QUFFNUMsY0FBTSxpQkFBaUIsUUFBUSxRQUFRLFFBQVE7QUFDL0MsWUFBSSxtQkFBbUIsSUFBSTtBQUN2QixnQkFBTSxTQUFTLFFBQVEsVUFBVSxHQUFHLGNBQWM7QUFDbEQsZ0JBQU0sUUFBUSxRQUFRLFVBQVUsY0FBYztBQUM5QyxvQkFBVSxTQUFTLE9BQU8sT0FBTztBQUFBLFFBQ3JDLE9BQU87QUFDSCxxQkFBVyxPQUFPO0FBQUEsUUFDdEI7QUFFQSxjQUFNLEtBQUssSUFBSSxNQUFNLE9BQU8sTUFBTSxPQUFPO0FBQ3pDLFlBQUksd0JBQU8scUJBQXFCO0FBQUEsTUFFcEMsU0FDTyxHQUFQO0FBQ0ksWUFBSSx3QkFBTyxPQUFPO0FBRWxCLGdCQUFRLElBQUksU0FBUyxHQUFHO0FBQUEsTUFDNUI7QUFBQSxJQUVKO0FBQUEsRUFDSjtBQUNKOyIsCiAgIm5hbWVzIjogWyJpbXBvcnRfb2JzaWRpYW4iLCAiZmlsZURyb3Bkb3duIiwgInZhbHVlIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAidGFza3MiXQp9Cg==
