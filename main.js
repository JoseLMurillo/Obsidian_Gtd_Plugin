/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// modals.ts
var import_obsidian = require("obsidian");
var processTask = class extends import_obsidian.Modal {
  constructor(app, tarea) {
    super(app);
    this.tarea = tarea;
  }
  onOpen() {
    new import_obsidian.Notice(this.tarea);
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Process tasks" });
    new import_obsidian.Setting(contentEl).setName("Nombre").addText((text) => text.onChange((value) => {
      this.name = value;
    }));
    new import_obsidian.Setting(contentEl).setName("Lista").addDropdown((dropdown) => {
      dropdown.addOption("option1", "Option 1");
      dropdown.addOption("option2", "Option 2");
      dropdown.addOption("option3", "Option 3");
      dropdown.addOption("option4", "Option 4");
      dropdown.onChange((value) => {
        this.listItem = value;
      });
    });
    new import_obsidian.Setting(contentEl).setName("Tiempo").addText((text) => {
      text.inputEl.setAttribute("type", "time");
      text.onChange((value) => {
        this.time = value;
      });
    });
    new import_obsidian.Setting(contentEl).setName("Fecha").addText((text) => {
      text.inputEl.setAttribute("type", "date");
      text.onChange((value) => {
        this.time = value;
      });
    });
    new import_obsidian.Setting(contentEl).setName("Hora").addText((text) => {
      text.inputEl.setAttribute("type", "time");
      text.onChange((value) => {
        this.hour = value;
      });
    });
    new import_obsidian.Setting(contentEl).setName("ID (Opcional)").addText((text) => text.onChange((value) => {
      this.id = value;
    }));
    contentEl.createEl("button", { text: "Submit" }).addEventListener("click", () => {
      this.submit();
    });
  }
  submit() {
    console.log("Nombre:", this.name);
    console.log("Lista:", this.listItem);
    console.log("Tiempo:", this.time);
    console.log("Fecha:", this.date);
    console.log("Hora:", this.hour);
    console.log("ID (Opcional):", this.id);
    this.close();
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var AddTaskModal = class extends import_obsidian.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Add task" });
    const textComponent = new import_obsidian.TextComponent(contentEl);
    textComponent.onChange((value) => {
      this.text = value;
    });
    const submitButton = new import_obsidian.ButtonComponent(contentEl);
    submitButton.setButtonText("Add").onClick(() => {
      this.close();
      this.onSubmit(this.text);
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var ExampleModal = class extends import_obsidian.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "What's your name?" });
    new import_obsidian.Setting(contentEl).setName("Name").addText((text) => text.onChange((value) => {
      this.result = value;
    }));
    new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText("Submit").setCta().onClick(() => {
      this.close();
      this.onSubmit(this.result);
    }));
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};

// main.ts
var MyPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    this.addCommand({
      id: "Process_Task",
      name: "Process Task",
      callback: () => {
        new processTask(this.app, "Tarea").open();
      }
    });
    this.addCommand({
      id: "Create_Gtd_Structure",
      name: "Create Gtd Structure",
      callback: () => this.createGtdStructure()
    });
    this.addCommand({
      id: "Add_Task_Inbox",
      name: "Add Task to Inbox",
      callback: () => {
        new AddTaskModal(this.app, (text) => this.addTextToIbox(text)).open();
      }
    });
    this.addRibbonIcon("package-plus", "Add Task to Inbox", () => {
      new AddTaskModal(this.app, (text) => this.addTextToIbox(text)).open();
    });
    this.addCommand({
      id: "display-modal",
      name: "Display modal",
      callback: () => {
        new ExampleModal(this.app, (result) => {
          new import_obsidian2.Notice(`Hello, ${result}!`);
        }).open();
      }
    });
    const item = this.addStatusBarItem();
    item.createEl("span", { text: "Hello from the status bar \u{1F44B}" });
    this.addCommand({
      id: "print-greeting-to-console",
      name: "Print greeting to console",
      callback: () => {
        console.log("Hey, you!");
        new import_obsidian2.Notice("Hey, you!");
      }
    });
    this.addRibbonIcon("dice", "Mostrar mensaje", () => {
      new import_obsidian2.Notice("Muestra un mensaje como toast");
    });
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Status Bar Text");
  }
  onunload() {
    console.log("unloading plugin");
  }
  //FUNCTIONS
  async createGtdStructure() {
    const vault = this.app.vault;
    const basePath = "GTD";
    const folders = [
      basePath,
      `${basePath}/1. Proyects`,
      `${basePath}/2. Stay`,
      `${basePath}/3. Someday`,
      `${basePath}/4. archive`
    ];
    const files = [
      { name: `${basePath}/Inbox.md`, data: "" },
      { name: `${basePath}/Documentation.md`, data: "" },
      { name: `${basePath}/Follow.md`, data: "" }
    ];
    for await (const folder of folders) {
      try {
        await vault.createFolder(folder);
      } catch (e) {
        console.log(`Folder ${folder} already exists.`);
      }
    }
    for await (const file of files) {
      const { name, data } = file;
      try {
        await vault.create(`${name}`, `${data}`);
      } catch (e) {
        console.log(`File file already exists.`);
      }
    }
    new import_obsidian2.Notice("GTD structure created!");
  }
  async addTextToIbox(text) {
    const filePath = "GTD/Inbox.md";
    const file = this.app.vault.getAbstractFileByPath(filePath);
    if (file instanceof import_obsidian2.TFile && text.trim() !== "") {
      try {
        text = `- [ ] ${text}`;
        let content = await this.app.vault.read(file);
        const insertPosition = content.indexOf("# Done");
        if (insertPosition !== -1) {
          const before = content.substring(0, insertPosition);
          const after = content.substring(insertPosition);
          content = before + text + "\n" + after;
        } else {
          content += "\n" + text;
        }
        await this.app.vault.modify(file, content);
        new import_obsidian2.Notice("Task added to inbox");
      } catch (e) {
        new import_obsidian2.Notice("ERROR");
        console.log(`Error ${e}`);
      }
    }
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJtb2RhbHMudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IFBsdWdpbiwgTm90aWNlLCBURmlsZSB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IHsgRXhhbXBsZU1vZGFsLCBBZGRUYXNrTW9kYWwsIHByb2Nlc3NUYXNrIH0gZnJvbSAnLi9tb2RhbHMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTXlQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xyXG5cclxuICAgIGFzeW5jIG9ubG9hZCgpIHtcclxuICAgICAgICB0aGlzLmFkZENvbW1hbmQoe1xyXG4gICAgICAgICAgICBpZDogJ1Byb2Nlc3NfVGFzaycsXHJcbiAgICAgICAgICAgIG5hbWU6ICdQcm9jZXNzIFRhc2snLFxyXG4gICAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbmV3IHByb2Nlc3NUYXNrKHRoaXMuYXBwLCAnVGFyZWEnKS5vcGVuKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICB0aGlzLmFkZENvbW1hbmQoe1xyXG4gICAgICAgICAgICBpZDogXCJDcmVhdGVfR3RkX1N0cnVjdHVyZVwiLFxyXG4gICAgICAgICAgICBuYW1lOiBcIkNyZWF0ZSBHdGQgU3RydWN0dXJlXCIsXHJcbiAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB0aGlzLmNyZWF0ZUd0ZFN0cnVjdHVyZSgpXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XHJcbiAgICAgICAgICAgIGlkOiAnQWRkX1Rhc2tfSW5ib3gnLFxyXG4gICAgICAgICAgICBuYW1lOiAnQWRkIFRhc2sgdG8gSW5ib3gnLFxyXG4gICAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbmV3IEFkZFRhc2tNb2RhbCh0aGlzLmFwcCwgKHRleHQpID0+IHRoaXMuYWRkVGV4dFRvSWJveCh0ZXh0KSkub3BlbigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkUmliYm9uSWNvbigncGFja2FnZS1wbHVzJywgJ0FkZCBUYXNrIHRvIEluYm94JywgKCkgPT4ge1xyXG4gICAgICAgICAgICBuZXcgQWRkVGFza01vZGFsKHRoaXMuYXBwLCAodGV4dCkgPT4gdGhpcy5hZGRUZXh0VG9JYm94KHRleHQpKS5vcGVuKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICB0aGlzLmFkZENvbW1hbmQoe1xyXG4gICAgICAgICAgICBpZDogXCJkaXNwbGF5LW1vZGFsXCIsXHJcbiAgICAgICAgICAgIG5hbWU6IFwiRGlzcGxheSBtb2RhbFwiLFxyXG4gICAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbmV3IEV4YW1wbGVNb2RhbCh0aGlzLmFwcCwgKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoYEhlbGxvLCAke3Jlc3VsdH0hYCk7XHJcbiAgICAgICAgICAgICAgICB9KS5vcGVuKCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5hZGRTdGF0dXNCYXJJdGVtKCk7XHJcbiAgICAgICAgaXRlbS5jcmVhdGVFbChcInNwYW5cIiwgeyB0ZXh0OiBcIkhlbGxvIGZyb20gdGhlIHN0YXR1cyBiYXIgXHVEODNEXHVEQzRCXCIgfSk7XHJcblxyXG5cclxuICAgICAgICB0aGlzLmFkZENvbW1hbmQoe1xyXG4gICAgICAgICAgICBpZDogXCJwcmludC1ncmVldGluZy10by1jb25zb2xlXCIsXHJcbiAgICAgICAgICAgIG5hbWU6IFwiUHJpbnQgZ3JlZXRpbmcgdG8gY29uc29sZVwiLFxyXG4gICAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJIZXksIHlvdSFcIik7XHJcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdIZXksIHlvdSEnKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkUmliYm9uSWNvbignZGljZScsICdNb3N0cmFyIG1lbnNhamUnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoJ011ZXN0cmEgdW4gbWVuc2FqZSBjb21vIHRvYXN0Jyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8qIE1ZIFRFU1QgKi9cclxuICAgICAgICAvLyBUaGlzIGFkZHMgYSBzdGF0dXMgYmFyIGl0ZW0gdG8gdGhlIGJvdHRvbSBvZiB0aGUgYXBwLiBEb2VzIG5vdCB3b3JrIG9uIG1vYmlsZSBhcHBzLlxyXG4gICAgICAgIGNvbnN0IHN0YXR1c0Jhckl0ZW1FbCA9IHRoaXMuYWRkU3RhdHVzQmFySXRlbSgpO1xyXG4gICAgICAgIHN0YXR1c0Jhckl0ZW1FbC5zZXRUZXh0KCdTdGF0dXMgQmFyIFRleHQnKTtcclxuICAgIH1cclxuXHJcbiAgICBvbnVubG9hZCgpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygndW5sb2FkaW5nIHBsdWdpbicpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vRlVOQ1RJT05TXHJcbiAgICBhc3luYyBjcmVhdGVHdGRTdHJ1Y3R1cmUoKSB7XHJcbiAgICAgICAgY29uc3QgdmF1bHQgPSB0aGlzLmFwcC52YXVsdDtcclxuICAgICAgICBjb25zdCBiYXNlUGF0aCA9ICdHVEQnO1xyXG5cclxuICAgICAgICBjb25zdCBmb2xkZXJzID0gW1xyXG4gICAgICAgICAgICBiYXNlUGF0aCxcclxuICAgICAgICAgICAgYCR7YmFzZVBhdGh9LzEuIFByb3llY3RzYCxcclxuICAgICAgICAgICAgYCR7YmFzZVBhdGh9LzIuIFN0YXlgLFxyXG4gICAgICAgICAgICBgJHtiYXNlUGF0aH0vMy4gU29tZWRheWAsXHJcbiAgICAgICAgICAgIGAke2Jhc2VQYXRofS80LiBhcmNoaXZlYFxyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIGNvbnN0IGZpbGVzID0gW1xyXG4gICAgICAgICAgICB7IG5hbWU6IGAke2Jhc2VQYXRofS9JbmJveC5tZGAsIGRhdGE6ICcnIH0sXHJcbiAgICAgICAgICAgIHsgbmFtZTogYCR7YmFzZVBhdGh9L0RvY3VtZW50YXRpb24ubWRgLCBkYXRhOiAnJyB9LFxyXG4gICAgICAgICAgICB7IG5hbWU6IGAke2Jhc2VQYXRofS9Gb2xsb3cubWRgLCBkYXRhOiAnJyB9XHJcbiAgICAgICAgXTtcclxuXHJcbiAgICAgICAgZm9yIGF3YWl0IChjb25zdCBmb2xkZXIgb2YgZm9sZGVycykge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdmF1bHQuY3JlYXRlRm9sZGVyKGZvbGRlcik7XHJcblxyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgRm9sZGVyICR7Zm9sZGVyfSBhbHJlYWR5IGV4aXN0cy5gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIGF3YWl0IChjb25zdCBmaWxlIG9mIGZpbGVzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgbmFtZSwgZGF0YSB9ID0gZmlsZTtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHZhdWx0LmNyZWF0ZShgJHtuYW1lfWAsIGAke2RhdGF9YCk7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBGaWxlIGZpbGUgYWxyZWFkeSBleGlzdHMuYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG5ldyBOb3RpY2UoJ0dURCBzdHJ1Y3R1cmUgY3JlYXRlZCEnKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgYXN5bmMgYWRkVGV4dFRvSWJveCh0ZXh0OiBzdHJpbmcpIHtcclxuICAgICAgICBjb25zdCBmaWxlUGF0aCA9ICdHVEQvSW5ib3gubWQnO1xyXG4gICAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZmlsZVBhdGgpO1xyXG5cclxuICAgICAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIFRGaWxlICYmIHRleHQudHJpbSgpICE9PSAnJykge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgdGV4dCA9IGAtIFsgXSAke3RleHR9YDtcclxuICAgICAgICAgICAgICAgIGxldCBjb250ZW50ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZChmaWxlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbnNlcnRQb3NpdGlvbiA9IGNvbnRlbnQuaW5kZXhPZignIyBEb25lJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5zZXJ0UG9zaXRpb24gIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYmVmb3JlID0gY29udGVudC5zdWJzdHJpbmcoMCwgaW5zZXJ0UG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFmdGVyID0gY29udGVudC5zdWJzdHJpbmcoaW5zZXJ0UG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBiZWZvcmUgKyB0ZXh0ICsgJ1xcbicgKyBhZnRlcjtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGVudCArPSAnXFxuJyArIHRleHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hcHAudmF1bHQubW9kaWZ5KGZpbGUsIGNvbnRlbnQpO1xyXG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnVGFzayBhZGRlZCB0byBpbmJveCcpO1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnRVJST1InKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgRXJyb3IgJHtlfWApXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsICJpbXBvcnQgeyBBcHAsIE1vZGFsLCBTZXR0aW5nLCBUZXh0Q29tcG9uZW50LCBCdXR0b25Db21wb25lbnQsIE5vdGljZSB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIHByb2Nlc3NUYXNrIGV4dGVuZHMgTW9kYWwge1xyXG4gIG5hbWU6IFN0cmluZztcclxuICBsaXN0SXRlbTogc3RyaW5nO1xyXG4gIHRpbWU6IHN0cmluZztcclxuICBkYXRlOiBzdHJpbmc7XHJcbiAgaG91cjogc3RyaW5nO1xyXG4gIGlkOiBzdHJpbmc7XHJcblxyXG4gIHRhcmVhOiBzdHJpbmc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGFwcDogQXBwLCB0YXJlYTogc3RyaW5nKSB7XHJcbiAgICBzdXBlcihhcHApO1xyXG4gICAgdGhpcy50YXJlYSA9IHRhcmVhO1xyXG4gIH1cclxuXHJcbiAgb25PcGVuKCkge1xyXG4gICAgbmV3IE5vdGljZSh0aGlzLnRhcmVhKTtcclxuICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xyXG5cclxuICAgIGNvbnRlbnRFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6ICdQcm9jZXNzIHRhc2tzJyB9KTtcclxuXHJcbiAgICBuZXcgU2V0dGluZyhjb250ZW50RWwpXHJcbiAgICAgIC5zZXROYW1lKCdOb21icmUnKVxyXG4gICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHQub25DaGFuZ2UodmFsdWUgPT4ge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IHZhbHVlO1xyXG4gICAgICB9KSk7XHJcblxyXG4gICAgXHJcbiAgICAvLyBMaXN0IGZpZWxkXHJcbiAgICBuZXcgU2V0dGluZyhjb250ZW50RWwpXHJcbiAgICAgIC5zZXROYW1lKCdMaXN0YScpXHJcbiAgICAgIC5hZGREcm9wZG93bihkcm9wZG93biA9PiB7XHJcbiAgICAgICAgZHJvcGRvd24uYWRkT3B0aW9uKCdvcHRpb24xJywgJ09wdGlvbiAxJyk7XHJcbiAgICAgICAgZHJvcGRvd24uYWRkT3B0aW9uKCdvcHRpb24yJywgJ09wdGlvbiAyJyk7XHJcbiAgICAgICAgZHJvcGRvd24uYWRkT3B0aW9uKCdvcHRpb24zJywgJ09wdGlvbiAzJyk7XHJcbiAgICAgICAgZHJvcGRvd24uYWRkT3B0aW9uKCdvcHRpb240JywgJ09wdGlvbiA0Jyk7XHJcbiAgICAgICAgZHJvcGRvd24ub25DaGFuZ2UodmFsdWUgPT4ge1xyXG4gICAgICAgICAgdGhpcy5saXN0SXRlbSA9IHZhbHVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAvLyBUaW1lIGZpZWxkXHJcbiAgICBuZXcgU2V0dGluZyhjb250ZW50RWwpXHJcbiAgICAgIC5zZXROYW1lKCdUaWVtcG8nKVxyXG4gICAgICAuYWRkVGV4dCgodGV4dCkgPT4ge1xyXG4gICAgICAgIHRleHQuaW5wdXRFbC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGltZScpO1xyXG4gICAgICAgIHRleHQub25DaGFuZ2UoKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLnRpbWUgPSB2YWx1ZTtcclxuICAgICAgICB9KVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAvLyBEYXRlIGZpZWxkXHJcbiAgICBuZXcgU2V0dGluZyhjb250ZW50RWwpXHJcbiAgICAgIC5zZXROYW1lKCdGZWNoYScpXHJcbiAgICAgIC5hZGRUZXh0KCh0ZXh0KSA9PiB7XHJcbiAgICAgICAgdGV4dC5pbnB1dEVsLnNldEF0dHJpYnV0ZSgndHlwZScsICdkYXRlJyk7XHJcbiAgICAgICAgdGV4dC5vbkNoYW5nZSgodmFsdWUpID0+IHtcclxuICAgICAgICAgIHRoaXMudGltZSA9IHZhbHVlO1xyXG4gICAgICAgIH0pXHJcbiAgICAgIH0pO1xyXG4gICAgXHJcbiAgICAvLyBIb3VyIGZpZWxkXHJcbiAgICBuZXcgU2V0dGluZyhjb250ZW50RWwpXHJcbiAgICAgIC5zZXROYW1lKCdIb3JhJylcclxuICAgICAgLmFkZFRleHQoKHRleHQpID0+IHtcclxuICAgICAgICB0ZXh0LmlucHV0RWwuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RpbWUnKTtcclxuICAgICAgICB0ZXh0Lm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5ob3VyID0gdmFsdWU7XHJcbiAgICAgICAgfSlcclxuICAgICAgfSk7XHJcblxyXG4gICAgLy8gSUQgZmllbGQgKG9wdGlvbmFsKVxyXG4gICAgbmV3IFNldHRpbmcoY29udGVudEVsKVxyXG4gICAgICAuc2V0TmFtZSgnSUQgKE9wY2lvbmFsKScpXHJcbiAgICAgIC5hZGRUZXh0KHRleHQgPT4gdGV4dC5vbkNoYW5nZSh2YWx1ZSA9PiB7XHJcbiAgICAgICAgdGhpcy5pZCA9IHZhbHVlO1xyXG4gICAgICB9KSk7XHJcblxyXG4gICAgLy8gQWRkIGEgc3VibWl0IGJ1dHRvblxyXG4gICAgY29udGVudEVsLmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdTdWJtaXQnIH0pLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICB0aGlzLnN1Ym1pdCgpO1xyXG4gICAgfSk7XHJcblxyXG4gIH1cclxuXHJcbiAgc3VibWl0KCkge1xyXG4gICAgY29uc29sZS5sb2coJ05vbWJyZTonLCB0aGlzLm5hbWUpO1xyXG4gICAgY29uc29sZS5sb2coJ0xpc3RhOicsIHRoaXMubGlzdEl0ZW0pO1xyXG4gICAgY29uc29sZS5sb2coJ1RpZW1wbzonLCB0aGlzLnRpbWUpO1xyXG4gICAgY29uc29sZS5sb2coJ0ZlY2hhOicsIHRoaXMuZGF0ZSk7XHJcbiAgICBjb25zb2xlLmxvZygnSG9yYTonLCB0aGlzLmhvdXIpO1xyXG4gICAgY29uc29sZS5sb2coJ0lEIChPcGNpb25hbCk6JywgdGhpcy5pZCk7XHJcbiAgICB0aGlzLmNsb3NlKCk7XHJcbiAgfVxyXG5cclxuICBvbkNsb3NlKCkge1xyXG4gICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XHJcbiAgICBjb250ZW50RWwuZW1wdHkoKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBBZGRUYXNrTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XHJcbiAgdGV4dDogc3RyaW5nO1xyXG4gIG9uU3VibWl0OiAodGV4dDogc3RyaW5nKSA9PiB2b2lkO1xyXG5cclxuICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgb25TdWJtaXQ6ICh0ZXh0OiBzdHJpbmcpID0+IHZvaWQpIHtcclxuICAgIHN1cGVyKGFwcCk7XHJcbiAgICB0aGlzLm9uU3VibWl0ID0gb25TdWJtaXQ7XHJcbiAgfVxyXG5cclxuICBvbk9wZW4oKSB7XHJcbiAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcclxuXHJcbiAgICBjb250ZW50RWwuY3JlYXRlRWwoJ2gyJywgeyB0ZXh0OiAnQWRkIHRhc2snIH0pO1xyXG5cclxuICAgIGNvbnN0IHRleHRDb21wb25lbnQgPSBuZXcgVGV4dENvbXBvbmVudChjb250ZW50RWwpO1xyXG4gICAgdGV4dENvbXBvbmVudC5vbkNoYW5nZSh2YWx1ZSA9PiB7XHJcbiAgICAgIHRoaXMudGV4dCA9IHZhbHVlO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3Qgc3VibWl0QnV0dG9uID0gbmV3IEJ1dHRvbkNvbXBvbmVudChjb250ZW50RWwpO1xyXG4gICAgc3VibWl0QnV0dG9uLnNldEJ1dHRvblRleHQoJ0FkZCcpLm9uQ2xpY2soKCkgPT4ge1xyXG4gICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgIHRoaXMub25TdWJtaXQodGhpcy50ZXh0KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgb25DbG9zZSgpIHtcclxuICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xyXG4gICAgY29udGVudEVsLmVtcHR5KCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRXhhbXBsZU1vZGFsIGV4dGVuZHMgTW9kYWwge1xyXG4gIHJlc3VsdDogc3RyaW5nO1xyXG4gIG9uU3VibWl0OiAocmVzdWx0OiBzdHJpbmcpID0+IHZvaWQ7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBvblN1Ym1pdDogKHJlc3VsdDogc3RyaW5nKSA9PiB2b2lkKSB7XHJcbiAgICBzdXBlcihhcHApO1xyXG4gICAgdGhpcy5vblN1Ym1pdCA9IG9uU3VibWl0O1xyXG4gIH1cclxuXHJcbiAgb25PcGVuKCkge1xyXG4gICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XHJcblxyXG4gICAgY29udGVudEVsLmNyZWF0ZUVsKFwiaDFcIiwgeyB0ZXh0OiBcIldoYXQncyB5b3VyIG5hbWU/XCIgfSk7XHJcblxyXG4gICAgbmV3IFNldHRpbmcoY29udGVudEVsKVxyXG4gICAgICAuc2V0TmFtZShcIk5hbWVcIilcclxuICAgICAgLmFkZFRleHQoKHRleHQpID0+XHJcbiAgICAgICAgdGV4dC5vbkNoYW5nZSgodmFsdWUpID0+IHtcclxuICAgICAgICAgIHRoaXMucmVzdWx0ID0gdmFsdWVcclxuICAgICAgICB9KSk7XHJcblxyXG4gICAgbmV3IFNldHRpbmcoY29udGVudEVsKVxyXG4gICAgICAuYWRkQnV0dG9uKChidG4pID0+XHJcbiAgICAgICAgYnRuXHJcbiAgICAgICAgICAuc2V0QnV0dG9uVGV4dChcIlN1Ym1pdFwiKVxyXG4gICAgICAgICAgLnNldEN0YSgpXHJcbiAgICAgICAgICAub25DbGljaygoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICAgICAgdGhpcy5vblN1Ym1pdCh0aGlzLnJlc3VsdCk7XHJcbiAgICAgICAgICB9KSk7XHJcbiAgfVxyXG5cclxuICBvbkNsb3NlKCkge1xyXG4gICAgbGV0IHsgY29udGVudEVsIH0gPSB0aGlzO1xyXG4gICAgY29udGVudEVsLmVtcHR5KCk7XHJcbiAgfVxyXG59Il0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBQUFBLG1CQUFzQzs7O0FDQXRDLHNCQUE0RTtBQUVyRSxJQUFNLGNBQU4sY0FBMEIsc0JBQU07QUFBQSxFQVVyQyxZQUFZLEtBQVUsT0FBZTtBQUNuQyxVQUFNLEdBQUc7QUFDVCxTQUFLLFFBQVE7QUFBQSxFQUNmO0FBQUEsRUFFQSxTQUFTO0FBQ1AsUUFBSSx1QkFBTyxLQUFLLEtBQUs7QUFDckIsVUFBTSxFQUFFLFVBQVUsSUFBSTtBQUV0QixjQUFVLFNBQVMsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFbEQsUUFBSSx3QkFBUSxTQUFTLEVBQ2xCLFFBQVEsUUFBUSxFQUNoQixRQUFRLFVBQVEsS0FBSyxTQUFTLFdBQVM7QUFDdEMsV0FBSyxPQUFPO0FBQUEsSUFDZCxDQUFDLENBQUM7QUFJSixRQUFJLHdCQUFRLFNBQVMsRUFDbEIsUUFBUSxPQUFPLEVBQ2YsWUFBWSxjQUFZO0FBQ3ZCLGVBQVMsVUFBVSxXQUFXLFVBQVU7QUFDeEMsZUFBUyxVQUFVLFdBQVcsVUFBVTtBQUN4QyxlQUFTLFVBQVUsV0FBVyxVQUFVO0FBQ3hDLGVBQVMsVUFBVSxXQUFXLFVBQVU7QUFDeEMsZUFBUyxTQUFTLFdBQVM7QUFDekIsYUFBSyxXQUFXO0FBQUEsTUFDbEIsQ0FBQztBQUFBLElBQ0gsQ0FBQztBQUdILFFBQUksd0JBQVEsU0FBUyxFQUNsQixRQUFRLFFBQVEsRUFDaEIsUUFBUSxDQUFDLFNBQVM7QUFDakIsV0FBSyxRQUFRLGFBQWEsUUFBUSxNQUFNO0FBQ3hDLFdBQUssU0FBUyxDQUFDLFVBQVU7QUFDdkIsYUFBSyxPQUFPO0FBQUEsTUFDZCxDQUFDO0FBQUEsSUFDSCxDQUFDO0FBR0gsUUFBSSx3QkFBUSxTQUFTLEVBQ2xCLFFBQVEsT0FBTyxFQUNmLFFBQVEsQ0FBQyxTQUFTO0FBQ2pCLFdBQUssUUFBUSxhQUFhLFFBQVEsTUFBTTtBQUN4QyxXQUFLLFNBQVMsQ0FBQyxVQUFVO0FBQ3ZCLGFBQUssT0FBTztBQUFBLE1BQ2QsQ0FBQztBQUFBLElBQ0gsQ0FBQztBQUdILFFBQUksd0JBQVEsU0FBUyxFQUNsQixRQUFRLE1BQU0sRUFDZCxRQUFRLENBQUMsU0FBUztBQUNqQixXQUFLLFFBQVEsYUFBYSxRQUFRLE1BQU07QUFDeEMsV0FBSyxTQUFTLENBQUMsVUFBVTtBQUN2QixhQUFLLE9BQU87QUFBQSxNQUNkLENBQUM7QUFBQSxJQUNILENBQUM7QUFHSCxRQUFJLHdCQUFRLFNBQVMsRUFDbEIsUUFBUSxlQUFlLEVBQ3ZCLFFBQVEsVUFBUSxLQUFLLFNBQVMsV0FBUztBQUN0QyxXQUFLLEtBQUs7QUFBQSxJQUNaLENBQUMsQ0FBQztBQUdKLGNBQVUsU0FBUyxVQUFVLEVBQUUsTUFBTSxTQUFTLENBQUMsRUFBRSxpQkFBaUIsU0FBUyxNQUFNO0FBQy9FLFdBQUssT0FBTztBQUFBLElBQ2QsQ0FBQztBQUFBLEVBRUg7QUFBQSxFQUVBLFNBQVM7QUFDUCxZQUFRLElBQUksV0FBVyxLQUFLLElBQUk7QUFDaEMsWUFBUSxJQUFJLFVBQVUsS0FBSyxRQUFRO0FBQ25DLFlBQVEsSUFBSSxXQUFXLEtBQUssSUFBSTtBQUNoQyxZQUFRLElBQUksVUFBVSxLQUFLLElBQUk7QUFDL0IsWUFBUSxJQUFJLFNBQVMsS0FBSyxJQUFJO0FBQzlCLFlBQVEsSUFBSSxrQkFBa0IsS0FBSyxFQUFFO0FBQ3JDLFNBQUssTUFBTTtBQUFBLEVBQ2I7QUFBQSxFQUVBLFVBQVU7QUFDUixVQUFNLEVBQUUsVUFBVSxJQUFJO0FBQ3RCLGNBQVUsTUFBTTtBQUFBLEVBQ2xCO0FBQ0Y7QUFFTyxJQUFNLGVBQU4sY0FBMkIsc0JBQU07QUFBQSxFQUl0QyxZQUFZLEtBQVUsVUFBa0M7QUFDdEQsVUFBTSxHQUFHO0FBQ1QsU0FBSyxXQUFXO0FBQUEsRUFDbEI7QUFBQSxFQUVBLFNBQVM7QUFDUCxVQUFNLEVBQUUsVUFBVSxJQUFJO0FBRXRCLGNBQVUsU0FBUyxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFN0MsVUFBTSxnQkFBZ0IsSUFBSSw4QkFBYyxTQUFTO0FBQ2pELGtCQUFjLFNBQVMsV0FBUztBQUM5QixXQUFLLE9BQU87QUFBQSxJQUNkLENBQUM7QUFFRCxVQUFNLGVBQWUsSUFBSSxnQ0FBZ0IsU0FBUztBQUNsRCxpQkFBYSxjQUFjLEtBQUssRUFBRSxRQUFRLE1BQU07QUFDOUMsV0FBSyxNQUFNO0FBQ1gsV0FBSyxTQUFTLEtBQUssSUFBSTtBQUFBLElBQ3pCLENBQUM7QUFBQSxFQUNIO0FBQUEsRUFFQSxVQUFVO0FBQ1IsVUFBTSxFQUFFLFVBQVUsSUFBSTtBQUN0QixjQUFVLE1BQU07QUFBQSxFQUNsQjtBQUNGO0FBRU8sSUFBTSxlQUFOLGNBQTJCLHNCQUFNO0FBQUEsRUFJdEMsWUFBWSxLQUFVLFVBQW9DO0FBQ3hELFVBQU0sR0FBRztBQUNULFNBQUssV0FBVztBQUFBLEVBQ2xCO0FBQUEsRUFFQSxTQUFTO0FBQ1AsVUFBTSxFQUFFLFVBQVUsSUFBSTtBQUV0QixjQUFVLFNBQVMsTUFBTSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFdEQsUUFBSSx3QkFBUSxTQUFTLEVBQ2xCLFFBQVEsTUFBTSxFQUNkLFFBQVEsQ0FBQyxTQUNSLEtBQUssU0FBUyxDQUFDLFVBQVU7QUFDdkIsV0FBSyxTQUFTO0FBQUEsSUFDaEIsQ0FBQyxDQUFDO0FBRU4sUUFBSSx3QkFBUSxTQUFTLEVBQ2xCLFVBQVUsQ0FBQyxRQUNWLElBQ0csY0FBYyxRQUFRLEVBQ3RCLE9BQU8sRUFDUCxRQUFRLE1BQU07QUFDYixXQUFLLE1BQU07QUFDWCxXQUFLLFNBQVMsS0FBSyxNQUFNO0FBQUEsSUFDM0IsQ0FBQyxDQUFDO0FBQUEsRUFDVjtBQUFBLEVBRUEsVUFBVTtBQUNSLFFBQUksRUFBRSxVQUFVLElBQUk7QUFDcEIsY0FBVSxNQUFNO0FBQUEsRUFDbEI7QUFDRjs7O0FEeEtBLElBQXFCLFdBQXJCLGNBQXNDLHdCQUFPO0FBQUEsRUFFekMsTUFBTSxTQUFTO0FBQ1gsU0FBSyxXQUFXO0FBQUEsTUFDWixJQUFJO0FBQUEsTUFDSixNQUFNO0FBQUEsTUFDTixVQUFVLE1BQU07QUFDWixZQUFJLFlBQVksS0FBSyxLQUFLLE9BQU8sRUFBRSxLQUFLO0FBQUEsTUFDNUM7QUFBQSxJQUNKLENBQUM7QUFFRCxTQUFLLFdBQVc7QUFBQSxNQUNaLElBQUk7QUFBQSxNQUNKLE1BQU07QUFBQSxNQUNOLFVBQVUsTUFBTSxLQUFLLG1CQUFtQjtBQUFBLElBQzVDLENBQUM7QUFFRCxTQUFLLFdBQVc7QUFBQSxNQUNaLElBQUk7QUFBQSxNQUNKLE1BQU07QUFBQSxNQUNOLFVBQVUsTUFBTTtBQUNaLFlBQUksYUFBYSxLQUFLLEtBQUssQ0FBQyxTQUFTLEtBQUssY0FBYyxJQUFJLENBQUMsRUFBRSxLQUFLO0FBQUEsTUFDeEU7QUFBQSxJQUNKLENBQUM7QUFFRCxTQUFLLGNBQWMsZ0JBQWdCLHFCQUFxQixNQUFNO0FBQzFELFVBQUksYUFBYSxLQUFLLEtBQUssQ0FBQyxTQUFTLEtBQUssY0FBYyxJQUFJLENBQUMsRUFBRSxLQUFLO0FBQUEsSUFDeEUsQ0FBQztBQUdELFNBQUssV0FBVztBQUFBLE1BQ1osSUFBSTtBQUFBLE1BQ0osTUFBTTtBQUFBLE1BQ04sVUFBVSxNQUFNO0FBQ1osWUFBSSxhQUFhLEtBQUssS0FBSyxDQUFDLFdBQVc7QUFDbkMsY0FBSSx3QkFBTyxVQUFVLFNBQVM7QUFBQSxRQUNsQyxDQUFDLEVBQUUsS0FBSztBQUFBLE1BQ1o7QUFBQSxJQUNKLENBQUM7QUFHRCxVQUFNLE9BQU8sS0FBSyxpQkFBaUI7QUFDbkMsU0FBSyxTQUFTLFFBQVEsRUFBRSxNQUFNLHNDQUErQixDQUFDO0FBRzlELFNBQUssV0FBVztBQUFBLE1BQ1osSUFBSTtBQUFBLE1BQ0osTUFBTTtBQUFBLE1BQ04sVUFBVSxNQUFNO0FBQ1osZ0JBQVEsSUFBSSxXQUFXO0FBQ3ZCLFlBQUksd0JBQU8sV0FBVztBQUFBLE1BRTFCO0FBQUEsSUFDSixDQUFDO0FBRUQsU0FBSyxjQUFjLFFBQVEsbUJBQW1CLE1BQU07QUFDaEQsVUFBSSx3QkFBTywrQkFBK0I7QUFBQSxJQUM5QyxDQUFDO0FBSUQsVUFBTSxrQkFBa0IsS0FBSyxpQkFBaUI7QUFDOUMsb0JBQWdCLFFBQVEsaUJBQWlCO0FBQUEsRUFDN0M7QUFBQSxFQUVBLFdBQVc7QUFDUCxZQUFRLElBQUksa0JBQWtCO0FBQUEsRUFDbEM7QUFBQTtBQUFBLEVBR0EsTUFBTSxxQkFBcUI7QUFDdkIsVUFBTSxRQUFRLEtBQUssSUFBSTtBQUN2QixVQUFNLFdBQVc7QUFFakIsVUFBTSxVQUFVO0FBQUEsTUFDWjtBQUFBLE1BQ0EsR0FBRztBQUFBLE1BQ0gsR0FBRztBQUFBLE1BQ0gsR0FBRztBQUFBLE1BQ0gsR0FBRztBQUFBLElBQ1A7QUFFQSxVQUFNLFFBQVE7QUFBQSxNQUNWLEVBQUUsTUFBTSxHQUFHLHFCQUFxQixNQUFNLEdBQUc7QUFBQSxNQUN6QyxFQUFFLE1BQU0sR0FBRyw2QkFBNkIsTUFBTSxHQUFHO0FBQUEsTUFDakQsRUFBRSxNQUFNLEdBQUcsc0JBQXNCLE1BQU0sR0FBRztBQUFBLElBQzlDO0FBRUEscUJBQWlCLFVBQVUsU0FBUztBQUNoQyxVQUFJO0FBQ0EsY0FBTSxNQUFNLGFBQWEsTUFBTTtBQUFBLE1BRW5DLFNBQVMsR0FBUDtBQUNFLGdCQUFRLElBQUksVUFBVSx3QkFBd0I7QUFBQSxNQUNsRDtBQUFBLElBQ0o7QUFFQSxxQkFBaUIsUUFBUSxPQUFPO0FBQzVCLFlBQU0sRUFBRSxNQUFNLEtBQUssSUFBSTtBQUN2QixVQUFJO0FBQ0EsY0FBTSxNQUFNLE9BQU8sR0FBRyxRQUFRLEdBQUcsTUFBTTtBQUFBLE1BQzNDLFNBQVMsR0FBUDtBQUNFLGdCQUFRLElBQUksMkJBQTJCO0FBQUEsTUFDM0M7QUFBQSxJQUNKO0FBRUEsUUFBSSx3QkFBTyx3QkFBd0I7QUFBQSxFQUN2QztBQUFBLEVBR0EsTUFBTSxjQUFjLE1BQWM7QUFDOUIsVUFBTSxXQUFXO0FBQ2pCLFVBQU0sT0FBTyxLQUFLLElBQUksTUFBTSxzQkFBc0IsUUFBUTtBQUUxRCxRQUFJLGdCQUFnQiwwQkFBUyxLQUFLLEtBQUssTUFBTSxJQUFJO0FBQzdDLFVBQUk7QUFDQSxlQUFPLFNBQVM7QUFDaEIsWUFBSSxVQUFVLE1BQU0sS0FBSyxJQUFJLE1BQU0sS0FBSyxJQUFJO0FBRTVDLGNBQU0saUJBQWlCLFFBQVEsUUFBUSxRQUFRO0FBQy9DLFlBQUksbUJBQW1CLElBQUk7QUFDdkIsZ0JBQU0sU0FBUyxRQUFRLFVBQVUsR0FBRyxjQUFjO0FBQ2xELGdCQUFNLFFBQVEsUUFBUSxVQUFVLGNBQWM7QUFDOUMsb0JBQVUsU0FBUyxPQUFPLE9BQU87QUFBQSxRQUNyQyxPQUFPO0FBQ0gscUJBQVcsT0FBTztBQUFBLFFBQ3RCO0FBRUEsY0FBTSxLQUFLLElBQUksTUFBTSxPQUFPLE1BQU0sT0FBTztBQUN6QyxZQUFJLHdCQUFPLHFCQUFxQjtBQUFBLE1BRXBDLFNBQ08sR0FBUDtBQUNJLFlBQUksd0JBQU8sT0FBTztBQUVsQixnQkFBUSxJQUFJLFNBQVMsR0FBRztBQUFBLE1BQzVCO0FBQUEsSUFFSjtBQUFBLEVBQ0o7QUFDSjsiLAogICJuYW1lcyI6IFsiaW1wb3J0X29ic2lkaWFuIl0KfQo=
