/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// modals/processInboxModal.ts
var import_obsidian = require("obsidian");
var ProcessInboxModal = class extends import_obsidian.Modal {
  constructor(app, tasks) {
    super(app);
    this.selectedFolder = "default";
    this.selectedFile = "default";
    this.tasks = tasks;
  }
  async onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Tasks" });
    for (let task of this.tasks) {
      const taskDiv = contentEl.createDiv();
      taskDiv.createEl("p", { text: task });
      new import_obsidian.Setting(taskDiv).setName("Select the destination").addDropdown((dropdown) => {
        dropdown.addOption("default", "");
        dropdown.addOption("1. Projects", "Projects");
        dropdown.addOption("2. Stay", "Stay");
        dropdown.addOption("3. Someday", "Someday");
        dropdown.addOption("Follow", "Follow");
        let fileDropdown = new import_obsidian.Setting(taskDiv);
        let fileName = new import_obsidian.Setting(taskDiv);
        let tag = new import_obsidian.Setting(taskDiv);
        let time = new import_obsidian.Setting(taskDiv);
        let date = new import_obsidian.Setting(taskDiv);
        let hour = new import_obsidian.Setting(taskDiv);
        dropdown.onChange(async (value) => {
          this.selectedFolder = value;
          fileDropdown.setName("").clear();
          fileName.setName("").clear();
          tag.setName("").clear();
          time.setName("").clear();
          date.setName("").clear();
          hour.setName("").clear();
          if (value !== "Follow" && value !== "default") {
            const files = await this.app.vault.adapter.list(`GTD/${value}`);
            if (files.files) {
              fileDropdown.setName("Select a project or create a new one").addDropdown((fileDropdown2) => {
                fileDropdown2.addOption("default", "");
                files.files.forEach((file) => {
                  fileDropdown2.addOption(file, this.getLastPart(file));
                });
                fileDropdown2.onChange((fileValue) => {
                  this.selectedFile = fileValue;
                });
              });
            }
          }
          fileName.setName("Project name if you do not have one selected").addText((text) => {
            text.onChange((value2) => {
              this.newFileName = value2;
            });
          });
          tag.setName("Tag").addText((text) => {
            text.onChange((value2) => {
              this.taskTag = value2;
            });
          }).settingEl.setAttribute("required", "true");
          time.setName("Duration time").addText((text) => {
            text.onChange((value2) => {
              this.taskTime = value2;
            });
          });
          date.setName("Date").addText((text) => {
            text.inputEl.setAttribute("type", "date");
            text.onChange((value2) => {
              this.taskDate = value2;
            });
          });
          hour.setName("Hour").addText((text) => {
            text.inputEl.setAttribute("type", "time");
            text.onChange((value2) => {
              this.taskHour = value2;
            });
          });
        });
        taskDiv.createEl("button", { text: "Process" }).addEventListener("click", () => {
          this.processTask(task);
          taskDiv.empty();
        });
      });
    }
  }
  getLastPart(text) {
    try {
      const lastSlashIndex = text.lastIndexOf("/");
      if (lastSlashIndex === -1) {
        return text;
      }
      return text.substring(lastSlashIndex + 1);
    } catch (error) {
      throw error;
    }
  }
  async addTaskToFile(text, filePath) {
    const file = this.app.vault.getAbstractFileByPath(filePath);
    if (file instanceof import_obsidian.TFile && text.trim() !== "") {
      try {
        let content = await this.app.vault.read(file);
        const insertPosition = content.indexOf("# Done");
        if (insertPosition !== -1) {
          const before = content.substring(0, insertPosition);
          const after = content.substring(insertPosition);
          content = before + text + "\n" + after;
        } else {
          content += "\n" + text;
        }
        await this.app.vault.modify(file, content);
        new import_obsidian.Notice("Task added");
      } catch (e) {
        new import_obsidian.Notice("ERROR");
        console.log(`Error ${e}`);
      }
    }
  }
  async deleteTaskFromFile(filePath, taskToDelete) {
    try {
      const fileContent = await this.app.vault.adapter.read(filePath);
      const lines = fileContent.split("\n");
      const updatedLines = lines.filter((line) => line.trim() !== taskToDelete.trim());
      const updatedContent = updatedLines.join("\n");
      await this.app.vault.adapter.write(filePath, updatedContent);
      new import_obsidian.Notice(`Task deleted: ${taskToDelete}`);
    } catch (error) {
      console.error("Failed to delete task:", error);
    }
  }
  async createProyect(path, fileName, data) {
    const newFilePath = `GTD/${path}/${fileName}.md`;
    const vault = this.app.vault;
    try {
      await vault.create(newFilePath, `${data}
# Done`);
      new import_obsidian.Notice("New project created successfully");
    } catch (e) {
      new import_obsidian.Notice("Error");
      console.log(`File ${newFilePath} already exists.`);
    }
    return newFilePath;
  }
  async processTask(task) {
    const formattedTask = `${task} #${this.taskTag} **${this.taskTime}** \u{1F4C5} ${this.taskDate} [hour::${this.taskHour}]`;
    try {
      if (this.selectedFolder === "Follow") {
        await this.addTaskToFile(formattedTask, `GTD/${this.selectedFolder}.md`);
      } else if (this.selectedFile === "default") {
        await this.createProyect(this.selectedFolder, this.newFileName, formattedTask);
      } else {
        await this.addTaskToFile(formattedTask, this.selectedFile);
      }
      this.deleteTaskFromFile("GTD/Inbox.md", task);
    } catch (error) {
      console.error("Error handling task:", error);
    }
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// modals/addTaskToInboxModal.ts
var import_obsidian2 = require("obsidian");
var AddTaskToInboxModal = class extends import_obsidian2.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Add task" });
    const textComponent = new import_obsidian2.TextComponent(contentEl);
    textComponent.onChange((value) => {
      this.text = value;
    });
    const submitButton = new import_obsidian2.ButtonComponent(contentEl);
    submitButton.setButtonText("Add").onClick(() => {
      addTaskToIbox(this.text, import_obsidian2.TFile);
      this.close();
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
async function addTaskToIbox(text, TFile3) {
  const filePath = "GTD/Inbox.md";
  const file = this.app.vault.getAbstractFileByPath(filePath);
  if (file instanceof TFile3 && text.trim() !== "") {
    try {
      text = `- [ ] ${text}`;
      let content = await this.app.vault.read(file);
      const insertPosition = content.indexOf("# Done");
      if (insertPosition !== -1) {
        const before = content.substring(0, insertPosition);
        const after = content.substring(insertPosition);
        content = before + text + "\n" + after;
      } else {
        content += "\n" + text;
      }
      await this.app.vault.modify(file, content);
      return true;
    } catch (e) {
      console.log(`Error ${e}`);
      return false;
    }
  }
}

// modals/processFileModal.ts
var import_obsidian3 = require("obsidian");
var ProcessFileModal = class extends import_obsidian3.Modal {
  constructor(app) {
    super(app);
    this.selectedDestination = "default";
  }
  async onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    const h2 = contentEl.createEl("h2", { text: "Move or Delete Proyect" });
    const taskDivParent = contentEl.createDiv();
    taskDivParent.style.backgroundColor = "#006C8C";
    const taskDiv = contentEl.createDiv();
    new import_obsidian3.Setting(taskDivParent).setName("Select folder to process").addDropdown((dropdown) => {
      dropdown.addOption("default", "");
      dropdown.addOption("2. Stay", "Stay");
      dropdown.addOption("3. Someday", "Someday");
      dropdown.onChange(async (value) => {
        taskDiv.empty();
        const folderPath = `GTD/${value}`;
        try {
          const files = await this.app.vault.adapter.list(folderPath);
          const fileList = files.files;
          if (fileList.length === 0) {
            contentEl.createEl("p", { text: "No files found in the Someday folder." });
            return;
          }
          for (let task of fileList) {
            taskDiv.createEl("h3", { text: this.getLastPart(task) });
            new import_obsidian3.Setting(taskDiv).setName("Select the destination").addDropdown((dropdown2) => {
              dropdown2.addOption("default", "");
              dropdown2.addOption("1. Projects", "Projects");
              dropdown2.addOption("2. Stay", "Stay");
              dropdown2.addOption("4. Archive", "Archive");
              dropdown2.onChange(async (value2) => {
                this.selectedDestination = value2;
              });
            });
            taskDiv.createEl("button", { text: "Move" }).addEventListener("click", async () => {
              if (task && this.selectedDestination !== "default") {
                await this.moveFile(task, this.selectedDestination);
                taskDiv.empty();
              } else {
                new import_obsidian3.Notice("Please select a file and folder first.");
              }
            });
            const btnDelete = taskDiv.createEl("button", { text: "Delete" });
            btnDelete.style.backgroundColor = "#DA1010";
            btnDelete.addEventListener("click", async () => {
              if (task) {
                await this.deleteFile(task);
                new import_obsidian3.Notice(`Deleted ${task}`);
                taskDiv.empty();
              } else {
                new import_obsidian3.Notice("Please select a file first.");
              }
            });
          }
        } catch (error) {
          console.log(error);
        }
      });
    });
  }
  async moveFile(file, destination) {
    const sourcePath = file;
    const destinationPath = `GTD/${destination}/${this.getLastPart(file)}`;
    const fileContent = await this.app.vault.adapter.read(sourcePath);
    await this.app.vault.create(`${destinationPath}/`, `${fileContent}`);
    await this.deleteFile(file);
  }
  getLastPart(text) {
    try {
      const lastSlashIndex = text.lastIndexOf("/");
      if (lastSlashIndex === -1) {
        return text;
      }
      return text.substring(lastSlashIndex + 1);
    } catch (error) {
      throw error;
    }
  }
  async deleteFile(file) {
    const filePath = file;
    try {
      await this.app.vault.adapter.remove(filePath);
    } catch (error) {
      console.error("Failed to delete file:", error);
    }
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// modals/taskManagerModal.ts
var import_obsidian4 = require("obsidian");
var TaskManagerModal = class extends import_obsidian4.Modal {
  constructor(app) {
    super(app);
  }
  async onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Manage Tasks" });
    const folderPaths = ["GTD/1. Projects", "GTD/2. Stay", "GTD/3. Someday"];
    try {
      const tasks = await this.readTasksFromFolders(folderPaths);
      if (tasks.length === 0) {
        contentEl.createEl("p", { text: "No tasks found." });
        return;
      }
      tasks.forEach((task) => {
        this.createTaskElement(task);
      });
    } catch (error) {
      console.error("Failed to read tasks:", error);
      contentEl.createEl("p", { text: "Failed to load tasks." });
    }
  }
  async readTasksFromFolders(folders) {
    const tasks = [];
    for (const folder of folders) {
      const files = await this.app.vault.adapter.list(folder);
      for (const file of files.files) {
        const content = await this.app.vault.adapter.read(file);
        const lines = content.split("\n");
        lines.forEach((line, index) => {
          if (line.match(/- \[ \].*📅 \d{4}-\d{2}-\d{2}/)) {
            tasks.push({ file, content: line, line: index });
          }
        });
      }
    }
    return tasks;
  }
  createTaskElement(task) {
    const { contentEl } = this;
    const taskEl = contentEl.createEl("div", { cls: "task-item" });
    const dateMatch = task.content.match(/📅 (\d{4}-\d{2}-\d{2})/);
    if (dateMatch) {
      const taskDate = new Date(dateMatch[1]);
      const currentDate = new Date();
      if (taskDate < currentDate) {
        taskEl.createEl("span", { text: task.content });
        taskEl.createEl("span", { text: " (Overdue)", cls: "overdue" });
        const dateInput = taskEl.createEl("input", { type: "date" });
        dateInput.value = dateMatch[1];
        const updateButton = taskEl.createEl("button", { text: "Update Date" });
        updateButton.addEventListener("click", async () => {
          const newDate = dateInput.value;
          await this.deleteTask(task.file, task.line);
          const updatedContent = task.content.replace(/📅 \d{4}-\d{2}-\d{2}/, `\u{1F4C5} ${newDate}`);
          await this.updateTask(task.file, task.line, updatedContent);
          new import_obsidian4.Notice("Task date updated.");
          taskEl.empty();
        });
        const deleteButton = taskEl.createEl("button", { text: "Delete Task" });
        deleteButton.style.backgroundColor = "#DA1010";
        deleteButton.addEventListener("click", async () => {
          await this.deleteTask(task.file, task.line);
          new import_obsidian4.Notice("Task deleted.");
          taskEl.empty();
        });
      }
    }
  }
  async updateTask(file, line, newContent) {
    const content = await this.app.vault.adapter.read(file);
    const lines = content.split("\n");
    lines[line] = newContent;
    await this.app.vault.adapter.write(file, lines.join("\n"));
  }
  async deleteTask(file, line) {
    const content = await this.app.vault.adapter.read(file);
    const lines = content.split("\n");
    lines.splice(line, 1);
    await this.app.vault.adapter.write(file, lines.join("\n"));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// functions/processInbox.ts
async function processInbox() {
  let tasks;
  const filePath = "GTD/Inbox.md";
  try {
    const fileContent = await this.app.vault.adapter.read(filePath);
    const tasks2 = fileContent.split("\n").filter((line) => line.startsWith("- [ ]"));
    return tasks2;
  } catch (error) {
    console.error("Failed to read file:", error);
  }
}

// functions/createGtdStructure.ts
async function createGtdStructure() {
  const vault = this.app.vault;
  const basePath = "GTD";
  const folders = [
    basePath,
    `${basePath}/1. Projects`,
    `${basePath}/2. Stay`,
    `${basePath}/3. Someday`,
    `${basePath}/4. Archive`
  ];
  const files = [
    { name: `${basePath}/Inbox.md`, data: "" },
    { name: `${basePath}/Documentation.md`, data: "" },
    { name: `${basePath}/Follow.md`, data: "" }
  ];
  try {
    for await (const folder of folders) {
      try {
        await vault.createFolder(folder);
      } catch (e) {
        console.log(`Folder ${folder} already exists.`);
      }
    }
    for await (const file of files) {
      const { name, data } = file;
      try {
        await vault.create(`${name}`, `${data}`);
      } catch (e) {
        console.log(`File file already exists.`);
      }
    }
    return true;
  } catch (e) {
    return false;
  }
}

// main.ts
var MyPlugin = class extends import_obsidian5.Plugin {
  async onload() {
    this.addCommand({
      id: "open-task-manager-modal",
      name: "Open Task Manager Modal",
      callback: () => {
        new TaskManagerModal(this.app).open();
      }
    });
    this.addRibbonIcon("calendar-clock", "Open Task Manager Modal", () => {
      new TaskManagerModal(this.app).open();
    });
    this.addCommand({
      id: "process-someday",
      name: "Process Someday",
      callback: () => {
        new ProcessFileModal(this.app).open();
      }
    });
    this.addRibbonIcon("arrow-down-up", "Process Someday", () => {
      new ProcessFileModal(this.app).open();
    });
    this.addCommand({
      id: "process-inbox",
      name: "process Inbox",
      callback: () => {
        processInbox().then((tasks) => {
          new ProcessInboxModal(this.app, tasks).open();
        });
      }
    });
    this.addRibbonIcon("folder-output", "process Inbox", () => {
      processInbox().then((tasks) => {
        new ProcessInboxModal(this.app, tasks).open();
      });
    });
    this.addCommand({
      id: "Create_Gtd_Structure",
      name: "Create Gtd Structure",
      callback: () => {
        createGtdStructure().then((result) => {
          if (result) {
            new import_obsidian5.Notice("GTD structure created!");
          } else {
            new import_obsidian5.Notice("Error");
          }
        });
      }
    });
    this.addCommand({
      id: "Add_Task_Inbox",
      name: "Add Task to Inbox",
      callback: () => {
        new AddTaskToInboxModal(this.app).open();
      }
    });
    this.addRibbonIcon("package-plus", "Add Task to Inbox", () => {
      new AddTaskToInboxModal(this.app).open();
    });
  }
  onunload() {
    new import_obsidian5.Notice("unloading plugin");
  }
};
//# sourceMappingURL=data:application/json;base64,
