/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// modals/processInboxModal.ts
var import_obsidian = require("obsidian");
var ProcessInboxModal = class extends import_obsidian.Modal {
  constructor(app, tasks) {
    super(app);
    this.selectedFolder = "default";
    this.selectedFile = "default";
    this.tasks = tasks;
  }
  async onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Tasks" });
    for (let task of this.tasks) {
      const taskDiv = contentEl.createDiv();
      taskDiv.createEl("p", { text: task });
      new import_obsidian.Setting(taskDiv).setName("Select the destination").addDropdown((dropdown) => {
        dropdown.addOption("default", "");
        dropdown.addOption("1. Projects", "Projects");
        dropdown.addOption("2. Stay", "Stay");
        dropdown.addOption("3. Someday", "Someday");
        dropdown.addOption("Follow", "Follow");
        let fileDropdown = new import_obsidian.Setting(taskDiv);
        let fileName = new import_obsidian.Setting(taskDiv);
        let tag = new import_obsidian.Setting(taskDiv);
        let time = new import_obsidian.Setting(taskDiv);
        let date = new import_obsidian.Setting(taskDiv);
        let hour = new import_obsidian.Setting(taskDiv);
        dropdown.onChange(async (value) => {
          this.selectedFolder = value;
          fileDropdown.setName("").clear();
          fileName.setName("").clear();
          tag.setName("").clear();
          time.setName("").clear();
          date.setName("").clear();
          hour.setName("").clear();
          if (value !== "Follow" && value !== "default") {
            const files = await this.app.vault.adapter.list(`GTD/${value}`);
            if (files.files) {
              fileDropdown.setName("Select a project or create a new one").addDropdown((fileDropdown2) => {
                fileDropdown2.addOption("default", "");
                files.files.forEach((file) => {
                  fileDropdown2.addOption(file, this.getLastPart(file));
                });
                fileDropdown2.onChange((fileValue) => {
                  this.selectedFile = fileValue;
                });
              });
            }
          }
          fileName.setName("Project name if you do not have one selected").addText((text) => {
            text.onChange((value2) => {
              this.newFileName = value2;
            });
          });
          tag.setName("Tag").addText((text) => {
            text.onChange((value2) => {
              this.taskTag = value2;
            });
          }).settingEl.setAttribute("required", "true");
          time.setName("Duration time").addText((text) => {
            text.onChange((value2) => {
              this.taskTime = value2;
            });
          });
          date.setName("Date").addText((text) => {
            text.inputEl.setAttribute("type", "date");
            text.onChange((value2) => {
              this.taskDate = value2;
            });
          });
          hour.setName("Hour").addText((text) => {
            text.inputEl.setAttribute("type", "time");
            text.onChange((value2) => {
              this.taskHour = value2;
            });
          });
        });
        taskDiv.createEl("button", { text: "Process" }).addEventListener("click", () => {
          this.processTask(task);
          taskDiv.empty();
        });
      });
    }
  }
  getLastPart(text) {
    try {
      const lastSlashIndex = text.lastIndexOf("/");
      if (lastSlashIndex === -1) {
        return text;
      }
      return text.substring(lastSlashIndex + 1);
    } catch (error) {
      throw error;
    }
  }
  async addTaskToFile(text, filePath) {
    const file = this.app.vault.getAbstractFileByPath(filePath);
    if (file instanceof import_obsidian.TFile && text.trim() !== "") {
      try {
        let content = await this.app.vault.read(file);
        const insertPosition = content.indexOf("# Done");
        if (insertPosition !== -1) {
          const before = content.substring(0, insertPosition);
          const after = content.substring(insertPosition);
          content = before + text + "\n" + after;
        } else {
          content += "\n" + text;
        }
        await this.app.vault.modify(file, content);
        new import_obsidian.Notice("Task added");
      } catch (e) {
        new import_obsidian.Notice("ERROR");
        console.log(`Error ${e}`);
      }
    }
  }
  async deleteTaskFromFile(filePath, taskToDelete) {
    try {
      const fileContent = await this.app.vault.adapter.read(filePath);
      const lines = fileContent.split("\n");
      const updatedLines = lines.filter((line) => line.trim() !== taskToDelete.trim());
      const updatedContent = updatedLines.join("\n");
      await this.app.vault.adapter.write(filePath, updatedContent);
      new import_obsidian.Notice(`Task deleted: ${taskToDelete}`);
    } catch (error) {
      console.error("Failed to delete task:", error);
    }
  }
  async createProyect(path, fileName, data) {
    const newFilePath = `GTD/${path}/${fileName}.md`;
    const vault = this.app.vault;
    try {
      await vault.create(newFilePath, `${data}
# Done`);
      new import_obsidian.Notice("New project created successfully");
    } catch (e) {
      new import_obsidian.Notice("Error");
      console.log(`File ${newFilePath} already exists.`);
    }
    return newFilePath;
  }
  async processTask(task) {
    const formattedTask = `${task} #${this.taskTag} **${this.taskTime}** \u{1F4C5} ${this.taskDate} [hour::${this.taskHour}]`;
    try {
      if (this.selectedFolder === "Follow") {
        await this.addTaskToFile(formattedTask, `GTD/${this.selectedFolder}.md`);
      } else if (this.selectedFile === "default") {
        await this.createProyect(this.selectedFolder, this.newFileName, formattedTask);
      } else {
        await this.addTaskToFile(formattedTask, this.selectedFile);
      }
      this.deleteTaskFromFile("GTD/Inbox.md", task);
    } catch (error) {
      console.error("Error handling task:", error);
    }
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// modals/exampleModal.ts
var import_obsidian2 = require("obsidian");
var ExampleModal = class extends import_obsidian2.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "What's your name?" });
    new import_obsidian2.Setting(contentEl).setName("Name").addText((text) => text.onChange((value) => {
      this.result = value;
    }));
    new import_obsidian2.Setting(contentEl).addButton((btn) => btn.setButtonText("Submit").setCta().onClick(() => {
      this.close();
      this.onSubmit(this.result);
    }));
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};

// modals/addTaskToInboxModal.ts
var import_obsidian3 = require("obsidian");
var AddTaskToInboxModal = class extends import_obsidian3.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Add task" });
    const textComponent = new import_obsidian3.TextComponent(contentEl);
    textComponent.onChange((value) => {
      this.text = value;
    });
    const submitButton = new import_obsidian3.ButtonComponent(contentEl);
    submitButton.setButtonText("Add").onClick(() => {
      this.close();
      this.onSubmit(this.text);
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// modals/processSomedayModal.ts
var import_obsidian4 = require("obsidian");
var ProcessSomedayModal = class extends import_obsidian4.Modal {
  constructor(app) {
    super(app);
    this.selectedDestination = "default";
  }
  async onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Move or Delete Proyects of Someday" });
    const folderPath = "GTD/3. Someday";
    try {
      const files = await this.app.vault.adapter.list(folderPath);
      const fileList = files.files;
      if (fileList.length === 0) {
        contentEl.createEl("p", { text: "No files found in the Someday folder." });
        return;
      }
      for (let task of fileList) {
        const taskDiv = contentEl.createDiv();
        taskDiv.createEl("h3", { text: this.getLastPart(task) });
        new import_obsidian4.Setting(taskDiv).setName("Select the destination").addDropdown((dropdown) => {
          dropdown.addOption("default", "");
          dropdown.addOption("1. Projects", "Projects");
          dropdown.addOption("2. Stay", "Stay");
          dropdown.addOption("4. Archive", "Archive");
          dropdown.onChange(async (value) => {
            this.selectedDestination = value;
          });
        });
        taskDiv.createEl("button", { text: "Move" }).addEventListener("click", async () => {
          if (task && this.selectedDestination !== "default") {
            await this.moveFile(task, this.selectedDestination);
            taskDiv.empty();
          } else {
            new import_obsidian4.Notice("Please select a file and folder first.");
          }
        });
        const btnDelete = taskDiv.createEl("button", { text: "Delete" });
        btnDelete.style.backgroundColor = "#DA1010";
        btnDelete.addEventListener("click", async () => {
          if (task) {
            await this.deleteFile(task);
            new import_obsidian4.Notice(`Deleted ${task}`);
            taskDiv.empty();
          } else {
            new import_obsidian4.Notice("Please select a file first.");
          }
        });
      }
    } catch (error) {
      console.log(error);
    }
  }
  async moveFile(file, destination) {
    const sourcePath = file;
    const destinationPath = `GTD/${destination}/${this.getLastPart(file)}`;
    const fileContent = await this.app.vault.adapter.read(sourcePath);
    await this.app.vault.create(`${destinationPath}/`, `${fileContent}`);
    await this.deleteFile(file);
  }
  getLastPart(text) {
    try {
      const lastSlashIndex = text.lastIndexOf("/");
      if (lastSlashIndex === -1) {
        return text;
      }
      return text.substring(lastSlashIndex + 1);
    } catch (error) {
      throw error;
    }
  }
  async deleteFile(file) {
    const filePath = file;
    try {
      await this.app.vault.adapter.remove(filePath);
    } catch (error) {
      console.error("Failed to delete file:", error);
    }
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// main.ts
var MyPlugin = class extends import_obsidian5.Plugin {
  async processInbox() {
    let tasks;
    const filePath = "GTD/Inbox.md";
    try {
      const fileContent = await this.app.vault.adapter.read(filePath);
      const tasks2 = fileContent.split("\n").filter((line) => line.startsWith("- [ ]"));
      new ProcessInboxModal(this.app, tasks2).open();
    } catch (error) {
      console.error("Failed to read file:", error);
    }
  }
  //
  async onload() {
    this.addCommand({
      id: "process-someday",
      name: "Process Someday",
      callback: () => {
        new ProcessSomedayModal(this.app).open();
      }
    });
    this.addRibbonIcon("arrow-down-up", "Process Someday", () => {
      new ProcessSomedayModal(this.app).open();
    });
    this.addCommand({
      id: "process-inbox",
      name: "process Inbox",
      callback: () => {
        this.processInbox();
      }
    });
    this.addRibbonIcon("folder-output", "process Inbox", () => {
      this.processInbox();
    });
    this.addCommand({
      id: "Create_Gtd_Structure",
      name: "Create Gtd Structure",
      callback: () => this.createGtdStructure()
    });
    this.addCommand({
      id: "Add_Task_Inbox",
      name: "Add Task to Inbox",
      callback: () => {
        new AddTaskToInboxModal(this.app, (text) => this.addTaskToIbox(text)).open();
      }
    });
    this.addRibbonIcon("package-plus", "Add Task to Inbox", () => {
      new AddTaskToInboxModal(this.app, (text) => this.addTaskToIbox(text)).open();
    });
    this.addCommand({
      id: "display-modal",
      name: "Display modal",
      callback: () => {
        new ExampleModal(this.app, (result) => {
          new import_obsidian5.Notice(`Hello, ${result}!`);
        }).open();
      }
    });
    const item = this.addStatusBarItem();
    item.createEl("span", { text: "Hello from the status bar \u{1F44B}" });
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Status Bar Text");
  }
  onunload() {
    new import_obsidian5.Notice("unloading plugin");
  }
  //FUNCTIONS
  async createGtdStructure() {
    const vault = this.app.vault;
    const basePath = "GTD";
    const folders = [
      basePath,
      `${basePath}/1. Projects`,
      `${basePath}/2. Stay`,
      `${basePath}/3. Someday`,
      `${basePath}/4. Archive`
    ];
    const files = [
      { name: `${basePath}/Inbox.md`, data: "" },
      { name: `${basePath}/Documentation.md`, data: "" },
      { name: `${basePath}/Follow.md`, data: "" }
    ];
    for await (const folder of folders) {
      try {
        await vault.createFolder(folder);
      } catch (e) {
        console.log(`Folder ${folder} already exists.`);
      }
    }
    for await (const file of files) {
      const { name, data } = file;
      try {
        await vault.create(`${name}`, `${data}`);
      } catch (e) {
        console.log(`File file already exists.`);
      }
    }
    new import_obsidian5.Notice("GTD structure created!");
  }
  async addTaskToIbox(text) {
    const filePath = "GTD/Inbox.md";
    const file = this.app.vault.getAbstractFileByPath(filePath);
    if (file instanceof import_obsidian5.TFile && text.trim() !== "") {
      try {
        text = `- [ ] ${text}`;
        let content = await this.app.vault.read(file);
        const insertPosition = content.indexOf("# Done");
        if (insertPosition !== -1) {
          const before = content.substring(0, insertPosition);
          const after = content.substring(insertPosition);
          content = before + text + "\n" + after;
        } else {
          content += "\n" + text;
        }
        await this.app.vault.modify(file, content);
        new import_obsidian5.Notice("Task added to inbox");
      } catch (e) {
        new import_obsidian5.Notice("ERROR");
        console.log(`Error ${e}`);
      }
    }
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJtb2RhbHMvcHJvY2Vzc0luYm94TW9kYWwudHMiLCAibW9kYWxzL2V4YW1wbGVNb2RhbC50cyIsICJtb2RhbHMvYWRkVGFza1RvSW5ib3hNb2RhbC50cyIsICJtb2RhbHMvcHJvY2Vzc1NvbWVkYXlNb2RhbC50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBOb3RpY2UsIFRGaWxlIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5cclxuLy8gTU9EQUxTXHJcbmltcG9ydCB7IFByb2Nlc3NJbmJveE1vZGFsIH0gZnJvbSAnLi9tb2RhbHMvcHJvY2Vzc0luYm94TW9kYWwnO1xyXG5pbXBvcnQgeyBFeGFtcGxlTW9kYWwgfSBmcm9tICcuL21vZGFscy9leGFtcGxlTW9kYWwnO1xyXG5pbXBvcnQgeyBBZGRUYXNrVG9JbmJveE1vZGFsIH0gZnJvbSAnLi9tb2RhbHMvYWRkVGFza1RvSW5ib3hNb2RhbCc7XHJcbmltcG9ydCB7IFByb2Nlc3NTb21lZGF5TW9kYWwgfSBmcm9tICdtb2RhbHMvcHJvY2Vzc1NvbWVkYXlNb2RhbCc7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTXlQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xyXG5cclxuICAgIGFzeW5jIHByb2Nlc3NJbmJveCgpIHtcclxuICAgICAgICBsZXQgdGFza3M6IHN0cmluZ1tdO1xyXG4gICAgICAgIGNvbnN0IGZpbGVQYXRoID0gJ0dURC9JbmJveC5tZCc7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIGNvbnN0IGZpbGVDb250ZW50ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQuYWRhcHRlci5yZWFkKGZpbGVQYXRoKTtcclxuICAgICAgICAgIGNvbnN0IHRhc2tzID0gZmlsZUNvbnRlbnQuc3BsaXQoJ1xcbicpLmZpbHRlcihsaW5lID0+IGxpbmUuc3RhcnRzV2l0aCgnLSBbIF0nKSk7XHJcbiAgICAgICAgICAvL3RoaXMudGFza3MgPSB0YXNrcztcclxuXHJcbiAgICAgICAgICBuZXcgUHJvY2Vzc0luYm94TW9kYWwodGhpcy5hcHAsIHRhc2tzKS5vcGVuKCk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byByZWFkIGZpbGU6JywgZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy9cclxuICAgIGFzeW5jIG9ubG9hZCgpIHtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcclxuICAgICAgICAgICAgaWQ6ICdwcm9jZXNzLXNvbWVkYXknLFxyXG4gICAgICAgICAgICBuYW1lOiAnUHJvY2VzcyBTb21lZGF5JyxcclxuICAgICAgICAgICAgY2FsbGJhY2s6ICgpID0+IHtcclxuICAgICAgICAgICAgICBuZXcgUHJvY2Vzc1NvbWVkYXlNb2RhbCh0aGlzLmFwcCkub3BlbigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRSaWJib25JY29uKCdhcnJvdy1kb3duLXVwJywgJ1Byb2Nlc3MgU29tZWRheScsICgpID0+IHtcclxuICAgICAgICAgICAgbmV3IFByb2Nlc3NTb21lZGF5TW9kYWwodGhpcy5hcHApLm9wZW4oKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcclxuICAgICAgICAgICAgaWQ6ICdwcm9jZXNzLWluYm94JyxcclxuICAgICAgICAgICAgbmFtZTogJ3Byb2Nlc3MgSW5ib3gnLFxyXG4gICAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xyXG4gICAgICAgICAgICAgIHRoaXMucHJvY2Vzc0luYm94KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmFkZFJpYmJvbkljb24oJ2ZvbGRlci1vdXRwdXQnLCAncHJvY2VzcyBJbmJveCcsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5wcm9jZXNzSW5ib3goKTtcclxuICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgIC8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuXHJcbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcclxuICAgICAgICAgICAgaWQ6IFwiQ3JlYXRlX0d0ZF9TdHJ1Y3R1cmVcIixcclxuICAgICAgICAgICAgbmFtZTogXCJDcmVhdGUgR3RkIFN0cnVjdHVyZVwiLFxyXG4gICAgICAgICAgICBjYWxsYmFjazogKCkgPT4gdGhpcy5jcmVhdGVHdGRTdHJ1Y3R1cmUoKVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmFkZENvbW1hbmQoe1xyXG4gICAgICAgICAgICBpZDogJ0FkZF9UYXNrX0luYm94JyxcclxuICAgICAgICAgICAgbmFtZTogJ0FkZCBUYXNrIHRvIEluYm94JyxcclxuICAgICAgICAgICAgY2FsbGJhY2s6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIG5ldyBBZGRUYXNrVG9JbmJveE1vZGFsKHRoaXMuYXBwLCAodGV4dCkgPT4gdGhpcy5hZGRUYXNrVG9JYm94KHRleHQpKS5vcGVuKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRSaWJib25JY29uKCdwYWNrYWdlLXBsdXMnLCAnQWRkIFRhc2sgdG8gSW5ib3gnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIG5ldyBBZGRUYXNrVG9JbmJveE1vZGFsKHRoaXMuYXBwLCAodGV4dCkgPT4gdGhpcy5hZGRUYXNrVG9JYm94KHRleHQpKS5vcGVuKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuXHJcblxyXG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XHJcbiAgICAgICAgICAgIGlkOiBcImRpc3BsYXktbW9kYWxcIixcclxuICAgICAgICAgICAgbmFtZTogXCJEaXNwbGF5IG1vZGFsXCIsXHJcbiAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBuZXcgRXhhbXBsZU1vZGFsKHRoaXMuYXBwLCAocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShgSGVsbG8sICR7cmVzdWx0fSFgKTtcclxuICAgICAgICAgICAgICAgIH0pLm9wZW4oKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmFkZFN0YXR1c0Jhckl0ZW0oKTtcclxuICAgICAgICBpdGVtLmNyZWF0ZUVsKFwic3BhblwiLCB7IHRleHQ6IFwiSGVsbG8gZnJvbSB0aGUgc3RhdHVzIGJhciBcdUQ4M0RcdURDNEJcIiB9KTtcclxuXHJcbiAgICAgICAgLyogTVkgVEVTVCAqL1xyXG4gICAgICAgIC8vIFRoaXMgYWRkcyBhIHN0YXR1cyBiYXIgaXRlbSB0byB0aGUgYm90dG9tIG9mIHRoZSBhcHAuIERvZXMgbm90IHdvcmsgb24gbW9iaWxlIGFwcHMuXHJcbiAgICAgICAgY29uc3Qgc3RhdHVzQmFySXRlbUVsID0gdGhpcy5hZGRTdGF0dXNCYXJJdGVtKCk7XHJcbiAgICAgICAgc3RhdHVzQmFySXRlbUVsLnNldFRleHQoJ1N0YXR1cyBCYXIgVGV4dCcpO1xyXG4gICAgfVxyXG5cclxuICAgIG9udW5sb2FkKCkge1xyXG4gICAgICAgIG5ldyBOb3RpY2UoJ3VubG9hZGluZyBwbHVnaW4nKTtcclxuICAgIH1cclxuXHJcbiAgICAvL0ZVTkNUSU9OU1xyXG4gICAgYXN5bmMgY3JlYXRlR3RkU3RydWN0dXJlKCkge1xyXG4gICAgICAgIGNvbnN0IHZhdWx0ID0gdGhpcy5hcHAudmF1bHQ7XHJcbiAgICAgICAgY29uc3QgYmFzZVBhdGggPSAnR1REJztcclxuXHJcbiAgICAgICAgY29uc3QgZm9sZGVycyA9IFtcclxuICAgICAgICAgICAgYmFzZVBhdGgsXHJcbiAgICAgICAgICAgIGAke2Jhc2VQYXRofS8xLiBQcm9qZWN0c2AsXHJcbiAgICAgICAgICAgIGAke2Jhc2VQYXRofS8yLiBTdGF5YCxcclxuICAgICAgICAgICAgYCR7YmFzZVBhdGh9LzMuIFNvbWVkYXlgLFxyXG4gICAgICAgICAgICBgJHtiYXNlUGF0aH0vNC4gQXJjaGl2ZWBcclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICBjb25zdCBmaWxlcyA9IFtcclxuICAgICAgICAgICAgeyBuYW1lOiBgJHtiYXNlUGF0aH0vSW5ib3gubWRgLCBkYXRhOiAnJyB9LFxyXG4gICAgICAgICAgICB7IG5hbWU6IGAke2Jhc2VQYXRofS9Eb2N1bWVudGF0aW9uLm1kYCwgZGF0YTogJycgfSxcclxuICAgICAgICAgICAgeyBuYW1lOiBgJHtiYXNlUGF0aH0vRm9sbG93Lm1kYCwgZGF0YTogJycgfVxyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIGZvciBhd2FpdCAoY29uc3QgZm9sZGVyIG9mIGZvbGRlcnMpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHZhdWx0LmNyZWF0ZUZvbGRlcihmb2xkZXIpO1xyXG5cclxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYEZvbGRlciAke2ZvbGRlcn0gYWxyZWFkeSBleGlzdHMuYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciBhd2FpdCAoY29uc3QgZmlsZSBvZiBmaWxlcykge1xyXG4gICAgICAgICAgICBjb25zdCB7IG5hbWUsIGRhdGEgfSA9IGZpbGU7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB2YXVsdC5jcmVhdGUoYCR7bmFtZX1gLCBgJHtkYXRhfWApO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgRmlsZSBmaWxlIGFscmVhZHkgZXhpc3RzLmApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBuZXcgTm90aWNlKCdHVEQgc3RydWN0dXJlIGNyZWF0ZWQhJyk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgYWRkVGFza1RvSWJveCh0ZXh0OiBzdHJpbmcpIHtcclxuICAgICAgICBjb25zdCBmaWxlUGF0aCA9ICdHVEQvSW5ib3gubWQnO1xyXG4gICAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZmlsZVBhdGgpO1xyXG5cclxuICAgICAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIFRGaWxlICYmIHRleHQudHJpbSgpICE9PSAnJykge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgdGV4dCA9IGAtIFsgXSAke3RleHR9YDtcclxuICAgICAgICAgICAgICAgIGxldCBjb250ZW50ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZChmaWxlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbnNlcnRQb3NpdGlvbiA9IGNvbnRlbnQuaW5kZXhPZignIyBEb25lJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5zZXJ0UG9zaXRpb24gIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYmVmb3JlID0gY29udGVudC5zdWJzdHJpbmcoMCwgaW5zZXJ0UG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFmdGVyID0gY29udGVudC5zdWJzdHJpbmcoaW5zZXJ0UG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBiZWZvcmUgKyB0ZXh0ICsgJ1xcbicgKyBhZnRlcjtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGVudCArPSAnXFxuJyArIHRleHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hcHAudmF1bHQubW9kaWZ5KGZpbGUsIGNvbnRlbnQpO1xyXG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnVGFzayBhZGRlZCB0byBpbmJveCcpO1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnRVJST1InKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgRXJyb3IgJHtlfWApXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsICJpbXBvcnQgeyBBcHAsIE1vZGFsLCBTZXR0aW5nLCBUZXh0Q29tcG9uZW50LCBCdXR0b25Db21wb25lbnQsIE5vdGljZSwgVEZpbGUgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBQcm9jZXNzSW5ib3hNb2RhbCBleHRlbmRzIE1vZGFsIHtcclxuICB0YXNrczogc3RyaW5nW107XHJcbiAgc2VsZWN0ZWRGb2xkZXI6IHN0cmluZyA9ICdkZWZhdWx0JztcclxuICBzZWxlY3RlZEZpbGU6IHN0cmluZyA9ICdkZWZhdWx0JztcclxuICBuZXdGaWxlTmFtZTogc3RyaW5nO1xyXG4gIHRhc2tUYWc6IHN0cmluZztcclxuICB0YXNrVGltZTogc3RyaW5nO1xyXG4gIHRhc2tEYXRlOiBzdHJpbmc7XHJcbiAgdGFza0hvdXI6IHN0cmluZztcclxuXHJcbiAgdGFzazogc3RyaW5nO1xyXG5cclxuICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgdGFza3M6IHN0cmluZ1tdKSB7XHJcbiAgICBzdXBlcihhcHApO1xyXG4gICAgdGhpcy50YXNrcyA9IHRhc2tzO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgb25PcGVuKCkge1xyXG4gICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XHJcbiAgICBjb250ZW50RWwuZW1wdHkoKTtcclxuXHJcbiAgICBjb250ZW50RWwuY3JlYXRlRWwoJ2gyJywgeyB0ZXh0OiAnVGFza3MnIH0pO1xyXG5cclxuICAgIGZvciAobGV0IHRhc2sgb2YgdGhpcy50YXNrcykge1xyXG4gICAgICBjb25zdCB0YXNrRGl2ID0gY29udGVudEVsLmNyZWF0ZURpdigpO1xyXG4gICAgICB0YXNrRGl2LmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiB0YXNrIH0pO1xyXG5cclxuICAgICAgLy9zZWxlY3RvciBkZSBjYXJwZXRhL2FyY2hpdm9cclxuICAgICAgbmV3IFNldHRpbmcodGFza0RpdilcclxuICAgICAgICAuc2V0TmFtZSgnU2VsZWN0IHRoZSBkZXN0aW5hdGlvbicpXHJcbiAgICAgICAgLmFkZERyb3Bkb3duKGRyb3Bkb3duID0+IHtcclxuICAgICAgICAgIGRyb3Bkb3duLmFkZE9wdGlvbignZGVmYXVsdCcsICcnKTtcclxuICAgICAgICAgIGRyb3Bkb3duLmFkZE9wdGlvbignMS4gUHJvamVjdHMnLCAnUHJvamVjdHMnKTtcclxuICAgICAgICAgIGRyb3Bkb3duLmFkZE9wdGlvbignMi4gU3RheScsICdTdGF5Jyk7XHJcbiAgICAgICAgICBkcm9wZG93bi5hZGRPcHRpb24oJzMuIFNvbWVkYXknLCAnU29tZWRheScpO1xyXG4gICAgICAgICAgZHJvcGRvd24uYWRkT3B0aW9uKCdGb2xsb3cnLCAnRm9sbG93Jyk7XHJcblxyXG4gICAgICAgICAgbGV0IGZpbGVEcm9wZG93biA9IG5ldyBTZXR0aW5nKHRhc2tEaXYpO1xyXG4gICAgICAgICAgbGV0IGZpbGVOYW1lID0gbmV3IFNldHRpbmcodGFza0Rpdik7XHJcbiAgICAgICAgICBsZXQgdGFnID0gbmV3IFNldHRpbmcodGFza0Rpdik7XHJcbiAgICAgICAgICBsZXQgdGltZSA9IG5ldyBTZXR0aW5nKHRhc2tEaXYpO1xyXG4gICAgICAgICAgbGV0IGRhdGUgPSBuZXcgU2V0dGluZyh0YXNrRGl2KTtcclxuICAgICAgICAgIGxldCBob3VyID0gbmV3IFNldHRpbmcodGFza0Rpdik7XHJcblxyXG4gICAgICAgICAgZHJvcGRvd24ub25DaGFuZ2UoYXN5bmMgdmFsdWUgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkRm9sZGVyID0gdmFsdWU7XHJcblxyXG4gICAgICAgICAgICBmaWxlRHJvcGRvd24uc2V0TmFtZSgnJykuY2xlYXIoKTtcclxuICAgICAgICAgICAgZmlsZU5hbWUuc2V0TmFtZSgnJykuY2xlYXIoKTtcclxuICAgICAgICAgICAgdGFnLnNldE5hbWUoJycpLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIHRpbWUuc2V0TmFtZSgnJykuY2xlYXIoKTtcclxuICAgICAgICAgICAgZGF0ZS5zZXROYW1lKCcnKS5jbGVhcigpO1xyXG4gICAgICAgICAgICBob3VyLnNldE5hbWUoJycpLmNsZWFyKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodmFsdWUgIT09ICdGb2xsb3cnICYmIHZhbHVlICE9PSAnZGVmYXVsdCcpIHtcclxuICAgICAgICAgICAgICBjb25zdCBmaWxlcyA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIubGlzdChgR1RELyR7dmFsdWV9YCk7XHJcblxyXG4gICAgICAgICAgICAgIGlmIChmaWxlcy5maWxlcykge1xyXG4gICAgICAgICAgICAgICAgZmlsZURyb3Bkb3duLnNldE5hbWUoJ1NlbGVjdCBhIHByb2plY3Qgb3IgY3JlYXRlIGEgbmV3IG9uZScpXHJcbiAgICAgICAgICAgICAgICAgIC5hZGREcm9wZG93bihmaWxlRHJvcGRvd24gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbGVEcm9wZG93bi5hZGRPcHRpb24oJ2RlZmF1bHQnLCAnJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZpbGVzLmZpbGVzLmZvckVhY2goZmlsZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBmaWxlRHJvcGRvd24uYWRkT3B0aW9uKGZpbGUsIHRoaXMuZ2V0TGFzdFBhcnQoZmlsZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmaWxlRHJvcGRvd24ub25DaGFuZ2UoZmlsZVZhbHVlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRGaWxlID0gZmlsZVZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZpbGVOYW1lXHJcbiAgICAgICAgICAgICAgLnNldE5hbWUoJ1Byb2plY3QgbmFtZSBpZiB5b3UgZG8gbm90IGhhdmUgb25lIHNlbGVjdGVkJylcclxuICAgICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHtcclxuICAgICAgICAgICAgICAgIHRleHQub25DaGFuZ2UodmFsdWUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLm5ld0ZpbGVOYW1lID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIFRBR1xyXG4gICAgICAgICAgICB0YWcuc2V0TmFtZSgnVGFnJylcclxuICAgICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHtcclxuICAgICAgICAgICAgICAgIHRleHQub25DaGFuZ2UodmFsdWUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnRhc2tUYWcgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgLnNldHRpbmdFbC5zZXRBdHRyaWJ1dGUoJ3JlcXVpcmVkJywgJ3RydWUnKVxyXG4gICAgICAgICAgICAgIDtcclxuXHJcbiAgICAgICAgICAgIC8vIERVUkFUSU9OIFRJTUVcclxuICAgICAgICAgICAgdGltZS5zZXROYW1lKCdEdXJhdGlvbiB0aW1lJylcclxuICAgICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHtcclxuICAgICAgICAgICAgICAgIHRleHQub25DaGFuZ2UodmFsdWUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnRhc2tUaW1lID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIERBVEVcclxuICAgICAgICAgICAgZGF0ZS5zZXROYW1lKCdEYXRlJylcclxuICAgICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHtcclxuICAgICAgICAgICAgICAgIHRleHQuaW5wdXRFbC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnZGF0ZScpO1xyXG4gICAgICAgICAgICAgICAgdGV4dC5vbkNoYW5nZSh2YWx1ZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMudGFza0RhdGUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gSE9VUlxyXG4gICAgICAgICAgICBob3VyLnNldE5hbWUoJ0hvdXInKVxyXG4gICAgICAgICAgICAgIC5hZGRUZXh0KHRleHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGV4dC5pbnB1dEVsLnNldEF0dHJpYnV0ZSgndHlwZScsICd0aW1lJyk7XHJcbiAgICAgICAgICAgICAgICB0ZXh0Lm9uQ2hhbmdlKHZhbHVlID0+IHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy50YXNrSG91ciA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAvLyBCVE4gUFJPQ0VTU1xyXG4gICAgICAgICAgdGFza0Rpdi5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnUHJvY2VzcycgfSkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnByb2Nlc3NUYXNrKHRhc2spO1xyXG4gICAgICAgICAgICB0YXNrRGl2LmVtcHR5KCk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuXHJcblxyXG4gIGdldExhc3RQYXJ0KHRleHQ6IHN0cmluZykge1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IGxhc3RTbGFzaEluZGV4ID0gdGV4dC5sYXN0SW5kZXhPZignLycpO1xyXG4gICAgICBpZiAobGFzdFNsYXNoSW5kZXggPT09IC0xKSB7XHJcbiAgICAgICAgcmV0dXJuIHRleHQ7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHRleHQuc3Vic3RyaW5nKGxhc3RTbGFzaEluZGV4ICsgMSk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICB0aHJvdyBlcnJvcjtcclxuICAgIH1cclxuICB9XHJcblxyXG5cclxuICBhc3luYyBhZGRUYXNrVG9GaWxlKHRleHQ6IHN0cmluZywgZmlsZVBhdGg6IHN0cmluZykge1xyXG4gICAgY29uc3QgZmlsZSA9IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChmaWxlUGF0aCk7XHJcblxyXG4gICAgaWYgKGZpbGUgaW5zdGFuY2VvZiBURmlsZSAmJiB0ZXh0LnRyaW0oKSAhPT0gJycpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBsZXQgY29udGVudCA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LnJlYWQoZmlsZSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGluc2VydFBvc2l0aW9uID0gY29udGVudC5pbmRleE9mKCcjIERvbmUnKTtcclxuICAgICAgICBpZiAoaW5zZXJ0UG9zaXRpb24gIT09IC0xKSB7XHJcbiAgICAgICAgICBjb25zdCBiZWZvcmUgPSBjb250ZW50LnN1YnN0cmluZygwLCBpbnNlcnRQb3NpdGlvbik7XHJcbiAgICAgICAgICBjb25zdCBhZnRlciA9IGNvbnRlbnQuc3Vic3RyaW5nKGluc2VydFBvc2l0aW9uKTtcclxuICAgICAgICAgIGNvbnRlbnQgPSBiZWZvcmUgKyB0ZXh0ICsgJ1xcbicgKyBhZnRlcjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY29udGVudCArPSAnXFxuJyArIHRleHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhd2FpdCB0aGlzLmFwcC52YXVsdC5tb2RpZnkoZmlsZSwgY29udGVudCk7XHJcbiAgICAgICAgbmV3IE5vdGljZSgnVGFzayBhZGRlZCcpO1xyXG5cclxuICAgICAgfVxyXG4gICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIG5ldyBOb3RpY2UoJ0VSUk9SJyk7XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKGBFcnJvciAke2V9YClcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcblxyXG4gIGFzeW5jIGRlbGV0ZVRhc2tGcm9tRmlsZShmaWxlUGF0aDogc3RyaW5nLCB0YXNrVG9EZWxldGU6IHN0cmluZykge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgZmlsZUNvbnRlbnQgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5hZGFwdGVyLnJlYWQoZmlsZVBhdGgpO1xyXG4gICAgICBjb25zdCBsaW5lcyA9IGZpbGVDb250ZW50LnNwbGl0KCdcXG4nKTtcclxuICAgICAgY29uc3QgdXBkYXRlZExpbmVzID0gbGluZXMuZmlsdGVyKGxpbmUgPT4gbGluZS50cmltKCkgIT09IHRhc2tUb0RlbGV0ZS50cmltKCkpO1xyXG4gICAgICBjb25zdCB1cGRhdGVkQ29udGVudCA9IHVwZGF0ZWRMaW5lcy5qb2luKCdcXG4nKTtcclxuXHJcbiAgICAgIGF3YWl0IHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIud3JpdGUoZmlsZVBhdGgsIHVwZGF0ZWRDb250ZW50KTtcclxuICAgICAgbmV3IE5vdGljZSAoYFRhc2sgZGVsZXRlZDogJHt0YXNrVG9EZWxldGV9YCk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZGVsZXRlIHRhc2s6JywgZXJyb3IpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcblxyXG4gIGFzeW5jIGNyZWF0ZVByb3llY3QocGF0aDogc3RyaW5nLCBmaWxlTmFtZTogc3RyaW5nLCBkYXRhOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IG5ld0ZpbGVQYXRoID0gYEdURC8ke3BhdGh9LyR7ZmlsZU5hbWV9Lm1kYDtcclxuICAgIGNvbnN0IHZhdWx0ID0gdGhpcy5hcHAudmF1bHQ7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgYXdhaXQgdmF1bHQuY3JlYXRlKG5ld0ZpbGVQYXRoLCBgJHtkYXRhfVxcbiMgRG9uZWApO1xyXG4gICAgICBuZXcgTm90aWNlKCdOZXcgcHJvamVjdCBjcmVhdGVkIHN1Y2Nlc3NmdWxseScpO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICBuZXcgTm90aWNlKCdFcnJvcicpO1xyXG4gICAgICBjb25zb2xlLmxvZyhgRmlsZSAke25ld0ZpbGVQYXRofSBhbHJlYWR5IGV4aXN0cy5gKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV3RmlsZVBhdGg7XHJcbiAgfVxyXG5cclxuXHJcbiAgYXN5bmMgcHJvY2Vzc1Rhc2sodGFzazogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBmb3JtYXR0ZWRUYXNrID0gYCR7dGFza30gIyR7dGhpcy50YXNrVGFnfSAqKiR7dGhpcy50YXNrVGltZX0qKiBcdUQ4M0RcdURDQzUgJHt0aGlzLnRhc2tEYXRlfSBbaG91cjo6JHt0aGlzLnRhc2tIb3VyfV1gO1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIGlmICh0aGlzLnNlbGVjdGVkRm9sZGVyID09PSAnRm9sbG93Jykge1xyXG4gICAgICAgIGF3YWl0IHRoaXMuYWRkVGFza1RvRmlsZShmb3JtYXR0ZWRUYXNrLCBgR1RELyR7dGhpcy5zZWxlY3RlZEZvbGRlcn0ubWRgKTtcclxuICBcclxuICAgICAgfSBlbHNlIGlmICh0aGlzLnNlbGVjdGVkRmlsZSA9PT0gJ2RlZmF1bHQnKSB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5jcmVhdGVQcm95ZWN0KHRoaXMuc2VsZWN0ZWRGb2xkZXIsIHRoaXMubmV3RmlsZU5hbWUsIGZvcm1hdHRlZFRhc2spO1xyXG4gIFxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGF3YWl0IHRoaXMuYWRkVGFza1RvRmlsZShmb3JtYXR0ZWRUYXNrLCB0aGlzLnNlbGVjdGVkRmlsZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuZGVsZXRlVGFza0Zyb21GaWxlKCdHVEQvSW5ib3gubWQnLCB0YXNrKTtcclxuICAgIH1cclxuICAgIGNhdGNoKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGhhbmRsaW5nIHRhc2s6JywgZXJyb3IpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb25DbG9zZSgpIHtcclxuICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xyXG4gICAgY29udGVudEVsLmVtcHR5KCk7XHJcbiAgfVxyXG59IiwgImltcG9ydCB7IEFwcCwgTW9kYWwsIFNldHRpbmd9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEV4YW1wbGVNb2RhbCBleHRlbmRzIE1vZGFsIHtcclxuICAgIHJlc3VsdDogc3RyaW5nO1xyXG4gICAgb25TdWJtaXQ6IChyZXN1bHQ6IHN0cmluZykgPT4gdm9pZDtcclxuICBcclxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBvblN1Ym1pdDogKHJlc3VsdDogc3RyaW5nKSA9PiB2b2lkKSB7XHJcbiAgICAgIHN1cGVyKGFwcCk7XHJcbiAgICAgIHRoaXMub25TdWJtaXQgPSBvblN1Ym1pdDtcclxuICAgIH1cclxuICBcclxuICAgIG9uT3BlbigpIHtcclxuICAgICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XHJcbiAgXHJcbiAgICAgIGNvbnRlbnRFbC5jcmVhdGVFbChcImgxXCIsIHsgdGV4dDogXCJXaGF0J3MgeW91ciBuYW1lP1wiIH0pO1xyXG4gIFxyXG4gICAgICBuZXcgU2V0dGluZyhjb250ZW50RWwpXHJcbiAgICAgICAgLnNldE5hbWUoXCJOYW1lXCIpXHJcbiAgICAgICAgLmFkZFRleHQoKHRleHQpID0+XHJcbiAgICAgICAgICB0ZXh0Lm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnJlc3VsdCA9IHZhbHVlXHJcbiAgICAgICAgICB9KSk7XHJcbiAgXHJcbiAgICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcclxuICAgICAgICAuYWRkQnV0dG9uKChidG4pID0+XHJcbiAgICAgICAgICBidG5cclxuICAgICAgICAgICAgLnNldEJ1dHRvblRleHQoXCJTdWJtaXRcIilcclxuICAgICAgICAgICAgLnNldEN0YSgpXHJcbiAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcclxuICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgdGhpcy5vblN1Ym1pdCh0aGlzLnJlc3VsdCk7XHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgIH1cclxuICBcclxuICAgIG9uQ2xvc2UoKSB7XHJcbiAgICAgIGxldCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcclxuICAgICAgY29udGVudEVsLmVtcHR5KCk7XHJcbiAgICB9XHJcbiAgfSIsICJpbXBvcnQgeyBBcHAsIE1vZGFsLCBUZXh0Q29tcG9uZW50LCBCdXR0b25Db21wb25lbnQgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBBZGRUYXNrVG9JbmJveE1vZGFsIGV4dGVuZHMgTW9kYWwge1xyXG4gICAgdGV4dDogc3RyaW5nO1xyXG4gICAgb25TdWJtaXQ6ICh0ZXh0OiBzdHJpbmcpID0+IHZvaWQ7XHJcbiAgXHJcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgb25TdWJtaXQ6ICh0ZXh0OiBzdHJpbmcpID0+IHZvaWQpIHtcclxuICAgICAgc3VwZXIoYXBwKTtcclxuICAgICAgdGhpcy5vblN1Ym1pdCA9IG9uU3VibWl0O1xyXG4gICAgfVxyXG4gIFxyXG4gICAgb25PcGVuKCkge1xyXG4gICAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcclxuICBcclxuICAgICAgY29udGVudEVsLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogJ0FkZCB0YXNrJyB9KTtcclxuICBcclxuICAgICAgY29uc3QgdGV4dENvbXBvbmVudCA9IG5ldyBUZXh0Q29tcG9uZW50KGNvbnRlbnRFbCk7XHJcbiAgICAgIHRleHRDb21wb25lbnQub25DaGFuZ2UodmFsdWUgPT4ge1xyXG4gICAgICAgIHRoaXMudGV4dCA9IHZhbHVlO1xyXG4gICAgICB9KTtcclxuICBcclxuICAgICAgY29uc3Qgc3VibWl0QnV0dG9uID0gbmV3IEJ1dHRvbkNvbXBvbmVudChjb250ZW50RWwpO1xyXG4gICAgICBzdWJtaXRCdXR0b24uc2V0QnV0dG9uVGV4dCgnQWRkJykub25DbGljaygoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgIHRoaXMub25TdWJtaXQodGhpcy50ZXh0KTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgXHJcbiAgICBvbkNsb3NlKCkge1xyXG4gICAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcclxuICAgICAgY29udGVudEVsLmVtcHR5KCk7XHJcbiAgICB9XHJcbiAgfSIsICJpbXBvcnQgeyBNb2RhbCwgQXBwLCBOb3RpY2UsIFNldHRpbmcsIFRBYnN0cmFjdEZpbGUgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBQcm9jZXNzU29tZWRheU1vZGFsIGV4dGVuZHMgTW9kYWwge1xyXG4gICAgc2VsZWN0ZWRGaWxlOiBzdHJpbmc7XHJcbiAgICBzZWxlY3RlZERlc3RpbmF0aW9uOiBzdHJpbmcgPSAnZGVmYXVsdCc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHApIHtcclxuICAgICAgICBzdXBlcihhcHApO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIG9uT3BlbigpIHtcclxuICAgICAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcclxuICAgICAgICBjb250ZW50RWwuZW1wdHkoKTtcclxuXHJcbiAgICAgICAgY29udGVudEVsLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogJ01vdmUgb3IgRGVsZXRlIFByb3llY3RzIG9mIFNvbWVkYXknIH0pO1xyXG5cclxuICAgICAgICBjb25zdCBmb2xkZXJQYXRoID0gJ0dURC8zLiBTb21lZGF5JztcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgZmlsZXMgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5hZGFwdGVyLmxpc3QoZm9sZGVyUGF0aCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpbGVMaXN0ID0gZmlsZXMuZmlsZXM7XHJcblxyXG4gICAgICAgICAgICBpZiAoZmlsZUxpc3QubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50RWwuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdObyBmaWxlcyBmb3VuZCBpbiB0aGUgU29tZWRheSBmb2xkZXIuJyB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgdGFzayBvZiBmaWxlTGlzdCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGFza0RpdiA9IGNvbnRlbnRFbC5jcmVhdGVEaXYoKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0YXNrRGl2LmNyZWF0ZUVsKCdoMycsIHsgdGV4dDogdGhpcy5nZXRMYXN0UGFydCh0YXNrKSB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBuZXcgU2V0dGluZyh0YXNrRGl2KVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXROYW1lKCdTZWxlY3QgdGhlIGRlc3RpbmF0aW9uJylcclxuICAgICAgICAgICAgICAgICAgICAuYWRkRHJvcGRvd24oZHJvcGRvd24gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi5hZGRPcHRpb24oJ2RlZmF1bHQnLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLmFkZE9wdGlvbignMS4gUHJvamVjdHMnLCAnUHJvamVjdHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24uYWRkT3B0aW9uKCcyLiBTdGF5JywgJ1N0YXknKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24uYWRkT3B0aW9uKCc0LiBBcmNoaXZlJywgJ0FyY2hpdmUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLm9uQ2hhbmdlKGFzeW5jIHZhbHVlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWREZXN0aW5hdGlvbiA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHRhc2tEaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ01vdmUnIH0pLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXNrICYmIHRoaXMuc2VsZWN0ZWREZXN0aW5hdGlvbiAhPT0gJ2RlZmF1bHQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMubW92ZUZpbGUodGFzaywgdGhpcy5zZWxlY3RlZERlc3RpbmF0aW9uKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tEaXYuZW1wdHkoKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdQbGVhc2Ugc2VsZWN0IGEgZmlsZSBhbmQgZm9sZGVyIGZpcnN0LicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGJ0bkRlbGV0ZSA9IHRhc2tEaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ0RlbGV0ZScgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgYnRuRGVsZXRlLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcjREExMDEwJztcclxuXHJcbiAgICAgICAgICAgICAgICBidG5EZWxldGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhc2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5kZWxldGVGaWxlKHRhc2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKGBEZWxldGVkICR7dGFza31gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFza0Rpdi5lbXB0eSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdQbGVhc2Ugc2VsZWN0IGEgZmlsZSBmaXJzdC4nKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGFzeW5jIG1vdmVGaWxlKGZpbGU6IHN0cmluZywgZGVzdGluYXRpb246IHN0cmluZykge1xyXG4gICAgICAgIGNvbnN0IHNvdXJjZVBhdGggPSBmaWxlO1xyXG4gICAgICAgIGNvbnN0IGRlc3RpbmF0aW9uUGF0aCA9IGBHVEQvJHtkZXN0aW5hdGlvbn0vJHt0aGlzLmdldExhc3RQYXJ0KGZpbGUpfWA7XHJcbiAgICAgICAgY29uc3QgZmlsZUNvbnRlbnQgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5hZGFwdGVyLnJlYWQoc291cmNlUGF0aCk7XHJcblxyXG4gICAgICAgIGF3YWl0IHRoaXMuYXBwLnZhdWx0LmNyZWF0ZShgJHtkZXN0aW5hdGlvblBhdGh9L2AsIGAke2ZpbGVDb250ZW50fWApO1xyXG5cclxuICAgICAgICBhd2FpdCB0aGlzLmRlbGV0ZUZpbGUoZmlsZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TGFzdFBhcnQodGV4dDogc3RyaW5nKSB7XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxhc3RTbGFzaEluZGV4ID0gdGV4dC5sYXN0SW5kZXhPZignLycpO1xyXG4gICAgICAgICAgICBpZiAobGFzdFNsYXNoSW5kZXggPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGV4dDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGV4dC5zdWJzdHJpbmcobGFzdFNsYXNoSW5kZXggKyAxKTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZGVsZXRlRmlsZShmaWxlOiBzdHJpbmcpIHtcclxuICAgICAgICBjb25zdCBmaWxlUGF0aCA9IGZpbGU7XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIucmVtb3ZlKGZpbGVQYXRoKTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZGVsZXRlIGZpbGU6JywgZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvbkNsb3NlKCkge1xyXG4gICAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xyXG4gICAgICAgIGNvbnRlbnRFbC5lbXB0eSgpO1xyXG4gICAgfVxyXG59Il0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBQUFBLG1CQUFzQzs7O0FDQXRDLHNCQUFtRjtBQUU1RSxJQUFNLG9CQUFOLGNBQWdDLHNCQUFNO0FBQUEsRUFZM0MsWUFBWSxLQUFVLE9BQWlCO0FBQ3JDLFVBQU0sR0FBRztBQVhYLDBCQUF5QjtBQUN6Qix3QkFBdUI7QUFXckIsU0FBSyxRQUFRO0FBQUEsRUFDZjtBQUFBLEVBRUEsTUFBTSxTQUFTO0FBQ2IsVUFBTSxFQUFFLFVBQVUsSUFBSTtBQUN0QixjQUFVLE1BQU07QUFFaEIsY0FBVSxTQUFTLE1BQU0sRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUUxQyxhQUFTLFFBQVEsS0FBSyxPQUFPO0FBQzNCLFlBQU0sVUFBVSxVQUFVLFVBQVU7QUFDcEMsY0FBUSxTQUFTLEtBQUssRUFBRSxNQUFNLEtBQUssQ0FBQztBQUdwQyxVQUFJLHdCQUFRLE9BQU8sRUFDaEIsUUFBUSx3QkFBd0IsRUFDaEMsWUFBWSxjQUFZO0FBQ3ZCLGlCQUFTLFVBQVUsV0FBVyxFQUFFO0FBQ2hDLGlCQUFTLFVBQVUsZUFBZSxVQUFVO0FBQzVDLGlCQUFTLFVBQVUsV0FBVyxNQUFNO0FBQ3BDLGlCQUFTLFVBQVUsY0FBYyxTQUFTO0FBQzFDLGlCQUFTLFVBQVUsVUFBVSxRQUFRO0FBRXJDLFlBQUksZUFBZSxJQUFJLHdCQUFRLE9BQU87QUFDdEMsWUFBSSxXQUFXLElBQUksd0JBQVEsT0FBTztBQUNsQyxZQUFJLE1BQU0sSUFBSSx3QkFBUSxPQUFPO0FBQzdCLFlBQUksT0FBTyxJQUFJLHdCQUFRLE9BQU87QUFDOUIsWUFBSSxPQUFPLElBQUksd0JBQVEsT0FB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
